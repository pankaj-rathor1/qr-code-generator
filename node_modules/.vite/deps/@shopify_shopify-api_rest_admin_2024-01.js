import {
  require_types,
  require_types2
} from "./chunk-7DNGBRSA.js";
import {
  init_tslib_es6,
  require_error,
  tslib_es6_exports
} from "./chunk-QFE7ZBXI.js";
import {
  __commonJS,
  __toCommonJS
} from "./chunk-WXXH56N5.js";

// node_modules/@shopify/shopify-api/rest/base.js
var require_base = __commonJS({
  "node_modules/@shopify/shopify-api/rest/base.js"(exports) {
    "use strict";
    var _Base_session;
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Base = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var error_1 = require_error();
    var types_1 = require_types2();
    var Base = class {
      static setClassProperties({ Client, config }) {
        this.Client = Client;
        this.config = config;
      }
      static baseFind({ session, urlIds, params }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "get",
            session,
            urlIds,
            params
          });
          return {
            data: this.createInstancesFromResponse(session, response.body),
            headers: response.headers,
            pageInfo: response.pageInfo
          };
        });
      }
      static request({ session, http_method, operation, urlIds, params, body, entity }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const client = new this.Client({
            session,
            apiVersion: this.apiVersion
          });
          const path = this.getPath({ http_method, operation, urlIds, entity });
          const cleanParams = {};
          if (params) {
            for (const key in params) {
              if (params[key] !== null) {
                cleanParams[key] = params[key];
              }
            }
          }
          switch (http_method) {
            case "get":
              return client.get({ path, query: cleanParams });
            case "post":
              return client.post({
                path,
                query: cleanParams,
                data: body,
                type: types_1.DataType.JSON
              });
            case "put":
              return client.put({
                path,
                query: cleanParams,
                data: body,
                type: types_1.DataType.JSON
              });
            case "delete":
              return client.delete({ path, query: cleanParams });
            default:
              throw new Error(`Unrecognized HTTP method "${http_method}"`);
          }
        });
      }
      static getJsonBodyName() {
        return this.name.replace(/([a-z])([A-Z])/g, "$1_$2").toLowerCase();
      }
      static getPath({ http_method, operation, urlIds, entity }) {
        let match = null;
        let specificity = -1;
        const potentialPaths = [];
        this.paths.forEach((path) => {
          if (http_method !== path.http_method || operation !== path.operation || path.ids.length <= specificity) {
            return;
          }
          potentialPaths.push(path);
          let pathUrlIds = Object.assign({}, urlIds);
          path.ids.forEach((id) => {
            if (!pathUrlIds[id] && entity && entity[id]) {
              pathUrlIds[id] = entity[id];
            }
          });
          pathUrlIds = Object.entries(pathUrlIds).reduce((acc, [key, value]) => {
            if (value) {
              acc[key] = value;
            }
            return acc;
          }, {});
          const diff = path.ids.reduce((acc, id) => pathUrlIds[id] ? acc : acc.concat(id), []);
          if (diff.length > 0) {
            return;
          }
          specificity = path.ids.length;
          match = path.path.replace(/(<([^>]+)>)/g, (_m1, _m2, id) => `${pathUrlIds[id]}`);
        });
        if (!match) {
          const pathOptions = potentialPaths.map((path) => path.path);
          throw new error_1.RestResourceError(`Could not find a path for request. If you are trying to make a request to one of the following paths, ensure all relevant IDs are set. :
 - ${pathOptions.join("\n - ")}`);
        }
        if (this.customPrefix) {
          return `${this.customPrefix}/${match}`;
        } else {
          return match;
        }
      }
      static createInstancesFromResponse(session, data) {
        let instances = [];
        this.resourceNames.forEach((resourceName) => {
          const singular = resourceName.singular;
          const plural = resourceName.plural;
          if (data[plural] || Array.isArray(data[singular])) {
            instances = instances.concat((data[plural] || data[singular]).reduce((acc, entry) => acc.concat(this.createInstance(session, entry)), []));
          } else if (data[singular]) {
            instances.push(this.createInstance(session, data[singular]));
          }
        });
        return instances;
      }
      static createInstance(session, data, prevInstance) {
        const instance = prevInstance ? prevInstance : new this({ session });
        if (data) {
          instance.setData(data);
        }
        return instance;
      }
      get session() {
        return tslib_1.__classPrivateFieldGet(this, _Base_session, "f");
      }
      constructor({ session, fromData }) {
        _Base_session.set(this, void 0);
        tslib_1.__classPrivateFieldSet(this, _Base_session, session, "f");
        if (fromData) {
          this.setData(fromData);
        }
      }
      save({ update = false } = {}) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const { primaryKey, resourceNames } = this.resource();
          const method = this[primaryKey] ? "put" : "post";
          const data = this.serialize(true);
          const response = yield this.resource().request({
            http_method: method,
            operation: method,
            session: this.session,
            urlIds: {},
            body: { [this.resource().getJsonBodyName()]: data },
            entity: this
          });
          const flattenResourceNames = resourceNames.reduce((acc, obj) => {
            return acc.concat(Object.values(obj));
          }, []);
          const matchResourceName = Object.keys(response.body).filter((key) => flattenResourceNames.includes(key));
          const body = response.body[matchResourceName[0]];
          if (update && body) {
            this.setData(body);
          }
        });
      }
      saveAndUpdate() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          yield this.save({ update: true });
        });
      }
      delete() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          yield this.resource().request({
            http_method: "delete",
            operation: "delete",
            session: this.session,
            urlIds: {},
            entity: this
          });
        });
      }
      serialize(saving = false) {
        const { hasMany, hasOne, readOnlyAttributes } = this.resource();
        return Object.entries(this).reduce((acc, [attribute, value]) => {
          if (["#session"].includes(attribute) || saving && readOnlyAttributes.includes(attribute)) {
            return acc;
          }
          if (attribute in hasMany && value) {
            acc[attribute] = value.reduce((attrAcc, entry) => {
              return attrAcc.concat(this.serializeSubAttribute(entry, saving));
            }, []);
          } else if (attribute in hasOne && value) {
            acc[attribute] = this.serializeSubAttribute(value, saving);
          } else {
            acc[attribute] = value;
          }
          return acc;
        }, {});
      }
      toJSON() {
        return this.serialize();
      }
      request(args) {
        return this.resource().request(args);
      }
      setData(data) {
        const { hasMany, hasOne } = this.resource();
        Object.entries(data).forEach(([attribute, val]) => {
          if (attribute in hasMany) {
            const HasManyResource = hasMany[attribute];
            this[attribute] = [];
            val.forEach((entry) => {
              this[attribute].push(new HasManyResource({ session: this.session, fromData: entry }));
            });
          } else if (attribute in hasOne) {
            const HasOneResource = hasOne[attribute];
            this[attribute] = new HasOneResource({
              session: this.session,
              fromData: val
            });
          } else {
            this[attribute] = val;
          }
        });
      }
      resource() {
        return this.constructor;
      }
      serializeSubAttribute(attribute, saving) {
        return attribute.serialize ? attribute.serialize(saving) : this.resource().createInstance(this.session, attribute).serialize(saving);
      }
    };
    exports.Base = Base;
    _Base_session = /* @__PURE__ */ new WeakMap();
    Base.resourceNames = [];
    Base.primaryKey = "id";
    Base.customPrefix = null;
    Base.readOnlyAttributes = [];
    Base.hasOne = {};
    Base.hasMany = {};
    Base.paths = [];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/currency.js
var require_currency = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/currency.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Currency = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Currency = class extends base_1.Base {
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
          return response;
        });
      }
    };
    exports.Currency = Currency;
    Currency.apiVersion = types_1.ApiVersion.January24;
    Currency.hasOne = {};
    Currency.hasMany = {};
    Currency.paths = [
      { "http_method": "get", "operation": "get", "ids": [], "path": "currencies.json" }
    ];
    Currency.resourceNames = [
      {
        "singular": "currency",
        "plural": "currencies"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/metafield.js
var require_metafield = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/metafield.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Metafield = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Metafield = class extends base_1.Base {
      static find({ session, id, article_id = null, blog_id = null, collection_id = null, customer_id = null, draft_order_id = null, order_id = null, page_id = null, product_image_id = null, product_id = null, variant_id = null, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id, "article_id": article_id, "blog_id": blog_id, "collection_id": collection_id, "customer_id": customer_id, "draft_order_id": draft_order_id, "order_id": order_id, "page_id": page_id, "product_image_id": product_image_id, "product_id": product_id, "variant_id": variant_id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id, article_id = null, blog_id = null, collection_id = null, customer_id = null, draft_order_id = null, order_id = null, page_id = null, product_image_id = null, product_id = null, variant_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id, "article_id": article_id, "blog_id": blog_id, "collection_id": collection_id, "customer_id": customer_id, "draft_order_id": draft_order_id, "order_id": order_id, "page_id": page_id, "product_image_id": product_image_id, "product_id": product_id, "variant_id": variant_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, article_id = null, blog_id = null, collection_id = null, customer_id = null, draft_order_id = null, order_id = null, page_id = null, product_image_id = null, product_id = null, variant_id = null, limit = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, namespace = null, key = null, type = null, fields = null, metafield = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "article_id", "blog_id", "collection_id", "customer_id", "draft_order_id", "order_id", "page_id", "product_image_id", "product_id", "variant_id", "limit", "since_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "namespace", "key", "type", "fields", "metafield"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "article_id": article_id, "blog_id": blog_id, "collection_id": collection_id, "customer_id": customer_id, "draft_order_id": draft_order_id, "order_id": order_id, "page_id": page_id, "product_image_id": product_image_id, "product_id": product_id, "variant_id": variant_id },
            params: Object.assign({ "limit": limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "namespace": namespace, "key": key, "type": type, "fields": fields, "metafield": metafield }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, article_id = null, blog_id = null, collection_id = null, customer_id = null, draft_order_id = null, order_id = null, page_id = null, product_image_id = null, product_id = null, variant_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "article_id", "blog_id", "collection_id", "customer_id", "draft_order_id", "order_id", "page_id", "product_image_id", "product_id", "variant_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: { "article_id": article_id, "blog_id": blog_id, "collection_id": collection_id, "customer_id": customer_id, "draft_order_id": draft_order_id, "order_id": order_id, "page_id": page_id, "product_image_id": product_image_id, "product_id": product_id, "variant_id": variant_id },
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Metafield = Metafield;
    Metafield.apiVersion = types_1.ApiVersion.January24;
    Metafield.hasOne = {};
    Metafield.hasMany = {};
    Metafield.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["article_id", "id"], "path": "articles/<article_id>/metafields/<id>.json" },
      { "http_method": "delete", "operation": "delete", "ids": ["blog_id", "id"], "path": "blogs/<blog_id>/metafields/<id>.json" },
      { "http_method": "delete", "operation": "delete", "ids": ["blog_id", "id"], "path": "blogs/<blog_id>/metafields/<id>.json" },
      { "http_method": "delete", "operation": "delete", "ids": ["collection_id", "id"], "path": "collections/<collection_id>/metafields/<id>.json" },
      { "http_method": "delete", "operation": "delete", "ids": ["customer_id", "id"], "path": "customers/<customer_id>/metafields/<id>.json" },
      { "http_method": "delete", "operation": "delete", "ids": ["draft_order_id", "id"], "path": "draft_orders/<draft_order_id>/metafields/<id>.json" },
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "metafields/<id>.json" },
      { "http_method": "delete", "operation": "delete", "ids": ["order_id", "id"], "path": "orders/<order_id>/metafields/<id>.json" },
      { "http_method": "delete", "operation": "delete", "ids": ["page_id", "id"], "path": "pages/<page_id>/metafields/<id>.json" },
      { "http_method": "delete", "operation": "delete", "ids": ["product_image_id", "id"], "path": "product_images/<product_image_id>/metafields/<id>.json" },
      { "http_method": "delete", "operation": "delete", "ids": ["product_id", "id"], "path": "products/<product_id>/metafields/<id>.json" },
      { "http_method": "delete", "operation": "delete", "ids": ["variant_id", "id"], "path": "variants/<variant_id>/metafields/<id>.json" },
      { "http_method": "get", "operation": "count", "ids": ["article_id"], "path": "articles/<article_id>/metafields/count.json" },
      { "http_method": "get", "operation": "count", "ids": ["blog_id"], "path": "blogs/<blog_id>/metafields/count.json" },
      { "http_method": "get", "operation": "count", "ids": ["blog_id"], "path": "blogs/<blog_id>/metafields/count.json" },
      { "http_method": "get", "operation": "count", "ids": ["collection_id"], "path": "collections/<collection_id>/metafields/count.json" },
      { "http_method": "get", "operation": "count", "ids": ["customer_id"], "path": "customers/<customer_id>/metafields/count.json" },
      { "http_method": "get", "operation": "count", "ids": ["draft_order_id"], "path": "draft_orders/<draft_order_id>/metafields/count.json" },
      { "http_method": "get", "operation": "count", "ids": [], "path": "metafields/count.json" },
      { "http_method": "get", "operation": "count", "ids": ["order_id"], "path": "orders/<order_id>/metafields/count.json" },
      { "http_method": "get", "operation": "count", "ids": ["page_id"], "path": "pages/<page_id>/metafields/count.json" },
      { "http_method": "get", "operation": "count", "ids": ["product_image_id"], "path": "product_images/<product_image_id>/metafields/count.json" },
      { "http_method": "get", "operation": "count", "ids": ["product_id"], "path": "products/<product_id>/metafields/count.json" },
      { "http_method": "get", "operation": "count", "ids": ["variant_id"], "path": "variants/<variant_id>/metafields/count.json" },
      { "http_method": "get", "operation": "get", "ids": ["article_id"], "path": "articles/<article_id>/metafields.json" },
      { "http_method": "get", "operation": "get", "ids": ["article_id", "id"], "path": "articles/<article_id>/metafields/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": ["blog_id"], "path": "blogs/<blog_id>/metafields.json" },
      { "http_method": "get", "operation": "get", "ids": ["blog_id"], "path": "blogs/<blog_id>/metafields.json" },
      { "http_method": "get", "operation": "get", "ids": ["blog_id", "id"], "path": "blogs/<blog_id>/metafields/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": ["blog_id", "id"], "path": "blogs/<blog_id>/metafields/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": ["collection_id"], "path": "collections/<collection_id>/metafields.json" },
      { "http_method": "get", "operation": "get", "ids": ["collection_id", "id"], "path": "collections/<collection_id>/metafields/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": ["customer_id"], "path": "customers/<customer_id>/metafields.json" },
      { "http_method": "get", "operation": "get", "ids": ["customer_id", "id"], "path": "customers/<customer_id>/metafields/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": ["draft_order_id"], "path": "draft_orders/<draft_order_id>/metafields.json" },
      { "http_method": "get", "operation": "get", "ids": ["draft_order_id", "id"], "path": "draft_orders/<draft_order_id>/metafields/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "metafields.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "metafields/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": ["order_id"], "path": "orders/<order_id>/metafields.json" },
      { "http_method": "get", "operation": "get", "ids": ["order_id", "id"], "path": "orders/<order_id>/metafields/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": ["page_id"], "path": "pages/<page_id>/metafields.json" },
      { "http_method": "get", "operation": "get", "ids": ["page_id", "id"], "path": "pages/<page_id>/metafields/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": ["product_image_id"], "path": "product_images/<product_image_id>/metafields.json" },
      { "http_method": "get", "operation": "get", "ids": ["product_image_id", "id"], "path": "product_images/<product_image_id>/metafields/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": ["product_id"], "path": "products/<product_id>/metafields.json" },
      { "http_method": "get", "operation": "get", "ids": ["product_id", "id"], "path": "products/<product_id>/metafields/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": ["variant_id"], "path": "variants/<variant_id>/metafields.json" },
      { "http_method": "get", "operation": "get", "ids": ["variant_id", "id"], "path": "variants/<variant_id>/metafields/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": ["article_id"], "path": "articles/<article_id>/metafields.json" },
      { "http_method": "post", "operation": "post", "ids": ["blog_id"], "path": "blogs/<blog_id>/metafields.json" },
      { "http_method": "post", "operation": "post", "ids": ["blog_id"], "path": "blogs/<blog_id>/metafields.json" },
      { "http_method": "post", "operation": "post", "ids": ["collection_id"], "path": "collections/<collection_id>/metafields.json" },
      { "http_method": "post", "operation": "post", "ids": ["customer_id"], "path": "customers/<customer_id>/metafields.json" },
      { "http_method": "post", "operation": "post", "ids": ["draft_order_id"], "path": "draft_orders/<draft_order_id>/metafields.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "metafields.json" },
      { "http_method": "post", "operation": "post", "ids": ["order_id"], "path": "orders/<order_id>/metafields.json" },
      { "http_method": "post", "operation": "post", "ids": ["page_id"], "path": "pages/<page_id>/metafields.json" },
      { "http_method": "post", "operation": "post", "ids": ["product_image_id"], "path": "product_images/<product_image_id>/metafields.json" },
      { "http_method": "post", "operation": "post", "ids": ["product_id"], "path": "products/<product_id>/metafields.json" },
      { "http_method": "post", "operation": "post", "ids": ["variant_id"], "path": "variants/<variant_id>/metafields.json" },
      { "http_method": "put", "operation": "put", "ids": ["article_id", "id"], "path": "articles/<article_id>/metafields/<id>.json" },
      { "http_method": "put", "operation": "put", "ids": ["blog_id", "id"], "path": "blogs/<blog_id>/metafields/<id>.json" },
      { "http_method": "put", "operation": "put", "ids": ["blog_id", "id"], "path": "blogs/<blog_id>/metafields/<id>.json" },
      { "http_method": "put", "operation": "put", "ids": ["collection_id", "id"], "path": "collections/<collection_id>/metafields/<id>.json" },
      { "http_method": "put", "operation": "put", "ids": ["customer_id", "id"], "path": "customers/<customer_id>/metafields/<id>.json" },
      { "http_method": "put", "operation": "put", "ids": ["draft_order_id", "id"], "path": "draft_orders/<draft_order_id>/metafields/<id>.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "metafields/<id>.json" },
      { "http_method": "put", "operation": "put", "ids": ["order_id", "id"], "path": "orders/<order_id>/metafields/<id>.json" },
      { "http_method": "put", "operation": "put", "ids": ["page_id", "id"], "path": "pages/<page_id>/metafields/<id>.json" },
      { "http_method": "put", "operation": "put", "ids": ["product_image_id", "id"], "path": "product_images/<product_image_id>/metafields/<id>.json" },
      { "http_method": "put", "operation": "put", "ids": ["product_id", "id"], "path": "products/<product_id>/metafields/<id>.json" },
      { "http_method": "put", "operation": "put", "ids": ["variant_id", "id"], "path": "variants/<variant_id>/metafields/<id>.json" }
    ];
    Metafield.resourceNames = [
      {
        "singular": "metafield",
        "plural": "metafields"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/customer.js
var require_customer = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/customer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Customer = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var metafield_1 = require_metafield();
    var Customer = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, ids = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, limit = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "ids", "since_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "limit", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "ids": ids, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "limit": limit, "fields": fields }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      static orders(_a) {
        var { session, id, status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "id", "status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "orders",
            session,
            urlIds: { "id": id },
            params: Object.assign({ "status": status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      static search(_a) {
        var { session, order = null, query = null, limit = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order", "query", "limit", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "search",
            session,
            urlIds: {},
            params: Object.assign({ "order": order, "query": query, "limit": limit, "fields": fields }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      account_activation_url(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "account_activation_url",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      send_invite(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "send_invite",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Customer = Customer;
    Customer.apiVersion = types_1.ApiVersion.January24;
    Customer.hasOne = {
      "metafield": metafield_1.Metafield
    };
    Customer.hasMany = {};
    Customer.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "customers/<id>.json" },
      { "http_method": "get", "operation": "count", "ids": [], "path": "customers/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "customers.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "customers/<id>.json" },
      { "http_method": "get", "operation": "orders", "ids": ["id"], "path": "customers/<id>/orders.json" },
      { "http_method": "get", "operation": "search", "ids": [], "path": "customers/search.json" },
      { "http_method": "post", "operation": "account_activation_url", "ids": ["id"], "path": "customers/<id>/account_activation_url.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "customers.json" },
      { "http_method": "post", "operation": "send_invite", "ids": ["id"], "path": "customers/<id>/send_invite.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "customers/<id>.json" }
    ];
    Customer.resourceNames = [
      {
        "singular": "customer",
        "plural": "customers"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/discount_code.js
var require_discount_code = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/discount_code.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DiscountCode = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var DiscountCode = class extends base_1.Base {
      static find({ session, id, price_rule_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id, "price_rule_id": price_rule_id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id, price_rule_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id, "price_rule_id": price_rule_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, price_rule_id = null, batch_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "price_rule_id", "batch_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "price_rule_id": price_rule_id, "batch_id": batch_id },
            params: Object.assign({}, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, times_used = null, times_used_min = null, times_used_max = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "times_used", "times_used_min", "times_used_max"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ "times_used": times_used, "times_used_min": times_used_min, "times_used_max": times_used_max }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      static get_all(_a) {
        var { session, price_rule_id = null, batch_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "price_rule_id", "batch_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "get_all",
            session,
            urlIds: { "price_rule_id": price_rule_id, "batch_id": batch_id },
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      static lookup(_a) {
        var { session, code = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "code"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "lookup",
            session,
            urlIds: {},
            params: Object.assign({ "code": code }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      batch(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "batch",
            session: this.session,
            urlIds: { "price_rule_id": this.price_rule_id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.DiscountCode = DiscountCode;
    DiscountCode.apiVersion = types_1.ApiVersion.January24;
    DiscountCode.hasOne = {};
    DiscountCode.hasMany = {};
    DiscountCode.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["price_rule_id", "id"], "path": "price_rules/<price_rule_id>/discount_codes/<id>.json" },
      { "http_method": "get", "operation": "count", "ids": [], "path": "discount_codes/count.json" },
      { "http_method": "get", "operation": "get", "ids": ["price_rule_id", "batch_id"], "path": "price_rules/<price_rule_id>/batch/<batch_id>/discount_codes.json" },
      { "http_method": "get", "operation": "get", "ids": ["price_rule_id"], "path": "price_rules/<price_rule_id>/discount_codes.json" },
      { "http_method": "get", "operation": "get", "ids": ["price_rule_id", "id"], "path": "price_rules/<price_rule_id>/discount_codes/<id>.json" },
      { "http_method": "get", "operation": "get_all", "ids": ["price_rule_id", "batch_id"], "path": "price_rules/<price_rule_id>/batch/<batch_id>.json" },
      { "http_method": "get", "operation": "lookup", "ids": [], "path": "discount_codes/lookup.json" },
      { "http_method": "post", "operation": "batch", "ids": ["price_rule_id"], "path": "price_rules/<price_rule_id>/batch.json" },
      { "http_method": "post", "operation": "post", "ids": ["price_rule_id"], "path": "price_rules/<price_rule_id>/discount_codes.json" },
      { "http_method": "put", "operation": "put", "ids": ["price_rule_id", "id"], "path": "price_rules/<price_rule_id>/discount_codes/<id>.json" }
    ];
    DiscountCode.resourceNames = [
      {
        "singular": "discount_code",
        "plural": "discount_codes"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/abandoned_checkout.js
var require_abandoned_checkout = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/abandoned_checkout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AbandonedCheckout = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var currency_1 = require_currency();
    var customer_1 = require_customer();
    var discount_code_1 = require_discount_code();
    var AbandonedCheckout = class extends base_1.Base {
      static checkouts(_a) {
        var { session, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, status = null, limit = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "since_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "status", "limit"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "checkouts",
            session,
            urlIds: {},
            params: Object.assign({ "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "status": status, "limit": limit }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.AbandonedCheckout = AbandonedCheckout;
    AbandonedCheckout.apiVersion = types_1.ApiVersion.January24;
    AbandonedCheckout.hasOne = {
      "currency": currency_1.Currency,
      "customer": customer_1.Customer
    };
    AbandonedCheckout.hasMany = {
      "discount_codes": discount_code_1.DiscountCode
    };
    AbandonedCheckout.paths = [
      { "http_method": "get", "operation": "checkouts", "ids": [], "path": "checkouts.json" },
      { "http_method": "get", "operation": "checkouts", "ids": [], "path": "checkouts.json" }
    ];
    AbandonedCheckout.resourceNames = [
      {
        "singular": "abandoned_checkout",
        "plural": "abandoned_checkouts"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/access_scope.js
var require_access_scope = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/access_scope.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AccessScope = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var AccessScope = class extends base_1.Base {
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
          return response;
        });
      }
    };
    exports.AccessScope = AccessScope;
    AccessScope.apiVersion = types_1.ApiVersion.January24;
    AccessScope.hasOne = {};
    AccessScope.hasMany = {};
    AccessScope.customPrefix = "/admin/oauth";
    AccessScope.paths = [
      { "http_method": "get", "operation": "get", "ids": [], "path": "access_scopes.json" }
    ];
    AccessScope.resourceNames = [
      {
        "singular": "access_scope",
        "plural": "access_scopes"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/apple_pay_certificate.js
var require_apple_pay_certificate = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/apple_pay_certificate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ApplePayCertificate = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var ApplePayCertificate = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static csr(_a) {
        var { session, id } = _a, otherArgs = tslib_1.__rest(_a, ["session", "id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "csr",
            session,
            urlIds: { "id": id },
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.ApplePayCertificate = ApplePayCertificate;
    ApplePayCertificate.apiVersion = types_1.ApiVersion.January24;
    ApplePayCertificate.hasOne = {};
    ApplePayCertificate.hasMany = {};
    ApplePayCertificate.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "apple_pay_certificates/<id>.json" },
      { "http_method": "get", "operation": "csr", "ids": ["id"], "path": "apple_pay_certificates/<id>/csr.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "apple_pay_certificates/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "apple_pay_certificates.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "apple_pay_certificates/<id>.json" }
    ];
    ApplePayCertificate.resourceNames = [
      {
        "singular": "apple_pay_certificate",
        "plural": "apple_pay_certificates"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/application_charge.js
var require_application_charge = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/application_charge.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ApplicationCharge = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var currency_1 = require_currency();
    var ApplicationCharge = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, since_id = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "since_id", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "since_id": since_id, "fields": fields }, otherArgs)
          });
          return response;
        });
      }
    };
    exports.ApplicationCharge = ApplicationCharge;
    ApplicationCharge.apiVersion = types_1.ApiVersion.January24;
    ApplicationCharge.hasOne = {
      "currency": currency_1.Currency
    };
    ApplicationCharge.hasMany = {};
    ApplicationCharge.paths = [
      { "http_method": "get", "operation": "get", "ids": [], "path": "application_charges.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "application_charges/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "application_charges.json" }
    ];
    ApplicationCharge.resourceNames = [
      {
        "singular": "application_charge",
        "plural": "application_charges"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/application_credit.js
var require_application_credit = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/application_credit.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ApplicationCredit = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var currency_1 = require_currency();
    var ApplicationCredit = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "fields": fields }, otherArgs)
          });
          return response;
        });
      }
    };
    exports.ApplicationCredit = ApplicationCredit;
    ApplicationCredit.apiVersion = types_1.ApiVersion.January24;
    ApplicationCredit.hasOne = {
      "currency": currency_1.Currency
    };
    ApplicationCredit.hasMany = {};
    ApplicationCredit.paths = [
      { "http_method": "get", "operation": "get", "ids": [], "path": "application_credits.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "application_credits/<id>.json" }
    ];
    ApplicationCredit.resourceNames = [
      {
        "singular": "application_credit",
        "plural": "application_credits"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/article.js
var require_article = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/article.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Article = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var metafield_1 = require_metafield();
    var Article = class extends base_1.Base {
      static find({ session, id, blog_id = null, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id, "blog_id": blog_id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id, blog_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id, "blog_id": blog_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, blog_id = null, limit = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, handle = null, tag = null, author = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "blog_id", "limit", "since_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status", "handle", "tag", "author", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "blog_id": blog_id },
            params: Object.assign({ "limit": limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, "handle": handle, "tag": tag, "author": author, "fields": fields }, otherArgs)
          });
          return response;
        });
      }
      static authors(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "authors",
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      static count(_a) {
        var { session, blog_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "blog_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: { "blog_id": blog_id },
            params: Object.assign({ "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      static tags(_a) {
        var { session, blog_id = null, limit = null, popular = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "blog_id", "limit", "popular"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "tags",
            session,
            urlIds: { "blog_id": blog_id },
            params: Object.assign({ "limit": limit, "popular": popular }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Article = Article;
    Article.apiVersion = types_1.ApiVersion.January24;
    Article.hasOne = {};
    Article.hasMany = {
      "metafields": metafield_1.Metafield
    };
    Article.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["blog_id", "id"], "path": "blogs/<blog_id>/articles/<id>.json" },
      { "http_method": "get", "operation": "authors", "ids": [], "path": "articles/authors.json" },
      { "http_method": "get", "operation": "count", "ids": ["blog_id"], "path": "blogs/<blog_id>/articles/count.json" },
      { "http_method": "get", "operation": "get", "ids": ["blog_id"], "path": "blogs/<blog_id>/articles.json" },
      { "http_method": "get", "operation": "get", "ids": ["blog_id", "id"], "path": "blogs/<blog_id>/articles/<id>.json" },
      { "http_method": "get", "operation": "tags", "ids": [], "path": "articles/tags.json" },
      { "http_method": "get", "operation": "tags", "ids": ["blog_id"], "path": "blogs/<blog_id>/articles/tags.json" },
      { "http_method": "post", "operation": "post", "ids": ["blog_id"], "path": "blogs/<blog_id>/articles.json" },
      { "http_method": "put", "operation": "put", "ids": ["blog_id", "id"], "path": "blogs/<blog_id>/articles/<id>.json" }
    ];
    Article.resourceNames = [
      {
        "singular": "article",
        "plural": "articles"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/asset.js
var require_asset = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/asset.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Asset = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Asset = class extends base_1.Base {
      static delete({ session, theme_id = null, asset = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "theme_id": theme_id },
            params: { "asset": asset }
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, theme_id = null, fields = null, asset = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "theme_id", "fields", "asset"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "theme_id": theme_id },
            params: Object.assign({ "fields": fields, "asset": asset }, otherArgs)
          });
          return response;
        });
      }
    };
    exports.Asset = Asset;
    Asset.apiVersion = types_1.ApiVersion.January24;
    Asset.hasOne = {};
    Asset.hasMany = {};
    Asset.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["theme_id"], "path": "themes/<theme_id>/assets.json" },
      { "http_method": "get", "operation": "get", "ids": ["theme_id"], "path": "themes/<theme_id>/assets.json" },
      { "http_method": "get", "operation": "get", "ids": ["theme_id"], "path": "themes/<theme_id>/assets.json" },
      { "http_method": "put", "operation": "put", "ids": ["theme_id"], "path": "themes/<theme_id>/assets.json" }
    ];
    Asset.primaryKey = "key";
    Asset.resourceNames = [
      {
        "singular": "asset",
        "plural": "assets"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/assigned_fulfillment_order.js
var require_assigned_fulfillment_order = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/assigned_fulfillment_order.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AssignedFulfillmentOrder = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var AssignedFulfillmentOrder = class extends base_1.Base {
      static all(_a) {
        var { session, assignment_status = null, location_ids = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "assignment_status", "location_ids"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "assignment_status": assignment_status, "location_ids": location_ids }, otherArgs)
          });
          return response;
        });
      }
    };
    exports.AssignedFulfillmentOrder = AssignedFulfillmentOrder;
    AssignedFulfillmentOrder.apiVersion = types_1.ApiVersion.January24;
    AssignedFulfillmentOrder.hasOne = {};
    AssignedFulfillmentOrder.hasMany = {};
    AssignedFulfillmentOrder.paths = [
      { "http_method": "get", "operation": "get", "ids": [], "path": "assigned_fulfillment_orders.json" }
    ];
    AssignedFulfillmentOrder.resourceNames = [
      {
        "singular": "fulfillment_order",
        "plural": "fulfillment_orders"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/balance.js
var require_balance = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/balance.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Balance = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Balance = class extends base_1.Base {
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
          return response;
        });
      }
    };
    exports.Balance = Balance;
    Balance.apiVersion = types_1.ApiVersion.January24;
    Balance.hasOne = {};
    Balance.hasMany = {};
    Balance.paths = [
      { "http_method": "get", "operation": "get", "ids": [], "path": "shopify_payments/balance.json" }
    ];
    Balance.resourceNames = [
      {
        "singular": "balance",
        "plural": "balances"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/blog.js
var require_blog = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/blog.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Blog = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var metafield_1 = require_metafield();
    var Blog = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null, since_id = null, handle = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "since_id", "handle", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "limit": limit, "since_id": since_id, "handle": handle, "fields": fields }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Blog = Blog;
    Blog.apiVersion = types_1.ApiVersion.January24;
    Blog.hasOne = {};
    Blog.hasMany = {
      "metafields": metafield_1.Metafield
    };
    Blog.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "blogs/<id>.json" },
      { "http_method": "get", "operation": "count", "ids": [], "path": "blogs/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "blogs.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "blogs/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "blogs.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "blogs/<id>.json" }
    ];
    Blog.resourceNames = [
      {
        "singular": "blog",
        "plural": "blogs"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/cancellation_request.js
var require_cancellation_request = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/cancellation_request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CancellationRequest = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var CancellationRequest = class extends base_1.Base {
      accept(_a) {
        var { message = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["message", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "accept",
            session: this.session,
            urlIds: { "fulfillment_order_id": this.fulfillment_order_id },
            params: Object.assign({ "message": message }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      reject(_a) {
        var { message = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["message", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "reject",
            session: this.session,
            urlIds: { "fulfillment_order_id": this.fulfillment_order_id },
            params: Object.assign({ "message": message }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.CancellationRequest = CancellationRequest;
    CancellationRequest.apiVersion = types_1.ApiVersion.January24;
    CancellationRequest.hasOne = {};
    CancellationRequest.hasMany = {};
    CancellationRequest.paths = [
      { "http_method": "post", "operation": "accept", "ids": ["fulfillment_order_id"], "path": "fulfillment_orders/<fulfillment_order_id>/cancellation_request/accept.json" },
      { "http_method": "post", "operation": "post", "ids": ["fulfillment_order_id"], "path": "fulfillment_orders/<fulfillment_order_id>/cancellation_request.json" },
      { "http_method": "post", "operation": "reject", "ids": ["fulfillment_order_id"], "path": "fulfillment_orders/<fulfillment_order_id>/cancellation_request/reject.json" }
    ];
    CancellationRequest.resourceNames = [
      {
        "singular": "cancellation_request",
        "plural": "cancellation_requests"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/carrier_service.js
var require_carrier_service = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/carrier_service.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CarrierService = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var CarrierService = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
          return response;
        });
      }
    };
    exports.CarrierService = CarrierService;
    CarrierService.apiVersion = types_1.ApiVersion.January24;
    CarrierService.hasOne = {};
    CarrierService.hasMany = {};
    CarrierService.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "carrier_services/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "carrier_services.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "carrier_services/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "carrier_services.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "carrier_services/<id>.json" }
    ];
    CarrierService.resourceNames = [
      {
        "singular": "carrier_service",
        "plural": "carrier_services"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/fulfillment.js
var require_fulfillment = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/fulfillment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Fulfillment = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Fulfillment = class extends base_1.Base {
      static find({ session, id, order_id = null, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id, "order_id": order_id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, fulfillment_order_id = null, order_id = null, created_at_max = null, created_at_min = null, fields = null, limit = null, since_id = null, updated_at_max = null, updated_at_min = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "fulfillment_order_id", "order_id", "created_at_max", "created_at_min", "fields", "limit", "since_id", "updated_at_max", "updated_at_min"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "fulfillment_order_id": fulfillment_order_id, "order_id": order_id },
            params: Object.assign({ "created_at_max": created_at_max, "created_at_min": created_at_min, "fields": fields, "limit": limit, "since_id": since_id, "updated_at_max": updated_at_max, "updated_at_min": updated_at_min }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, order_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: { "order_id": order_id },
            params: Object.assign({ "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      cancel(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "cancel",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      update_tracking(_a) {
        var { notify_customer = null, tracking_info = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["notify_customer", "tracking_info", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "update_tracking",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({ "notify_customer": notify_customer, "tracking_info": tracking_info }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Fulfillment = Fulfillment;
    Fulfillment.apiVersion = types_1.ApiVersion.January24;
    Fulfillment.hasOne = {};
    Fulfillment.hasMany = {};
    Fulfillment.paths = [
      { "http_method": "get", "operation": "count", "ids": ["order_id"], "path": "orders/<order_id>/fulfillments/count.json" },
      { "http_method": "get", "operation": "get", "ids": ["fulfillment_order_id"], "path": "fulfillment_orders/<fulfillment_order_id>/fulfillments.json" },
      { "http_method": "get", "operation": "get", "ids": ["order_id"], "path": "orders/<order_id>/fulfillments.json" },
      { "http_method": "get", "operation": "get", "ids": ["order_id", "id"], "path": "orders/<order_id>/fulfillments/<id>.json" },
      { "http_method": "post", "operation": "cancel", "ids": ["id"], "path": "fulfillments/<id>/cancel.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "fulfillments.json" },
      { "http_method": "post", "operation": "update_tracking", "ids": ["id"], "path": "fulfillments/<id>/update_tracking.json" }
    ];
    Fulfillment.resourceNames = [
      {
        "singular": "fulfillment",
        "plural": "fulfillments"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/transaction.js
var require_transaction = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/transaction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Transaction = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Transaction = class extends base_1.Base {
      static find({ session, id, order_id = null, fields = null, in_shop_currency = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id, "order_id": order_id },
            params: { "fields": fields, "in_shop_currency": in_shop_currency }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, order_id = null, since_id = null, fields = null, in_shop_currency = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order_id", "since_id", "fields", "in_shop_currency"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "order_id": order_id },
            params: Object.assign({ "since_id": since_id, "fields": fields, "in_shop_currency": in_shop_currency }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, order_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: { "order_id": order_id },
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Transaction = Transaction;
    Transaction.apiVersion = types_1.ApiVersion.January24;
    Transaction.hasOne = {};
    Transaction.hasMany = {};
    Transaction.paths = [
      { "http_method": "get", "operation": "count", "ids": ["order_id"], "path": "orders/<order_id>/transactions/count.json" },
      { "http_method": "get", "operation": "get", "ids": ["order_id"], "path": "orders/<order_id>/transactions.json" },
      { "http_method": "get", "operation": "get", "ids": ["order_id", "id"], "path": "orders/<order_id>/transactions/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": ["order_id"], "path": "orders/<order_id>/transactions.json" }
    ];
    Transaction.resourceNames = [
      {
        "singular": "transaction",
        "plural": "transactions"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/refund.js
var require_refund = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/refund.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Refund = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var transaction_1 = require_transaction();
    var Refund = class extends base_1.Base {
      static find({ session, id, order_id = null, fields = null, in_shop_currency = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id, "order_id": order_id },
            params: { "fields": fields, "in_shop_currency": in_shop_currency }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, order_id = null, limit = null, fields = null, in_shop_currency = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order_id", "limit", "fields", "in_shop_currency"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "order_id": order_id },
            params: Object.assign({ "limit": limit, "fields": fields, "in_shop_currency": in_shop_currency }, otherArgs)
          });
          return response;
        });
      }
      calculate(_a) {
        var { shipping = null, refund_line_items = null, currency = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["shipping", "refund_line_items", "currency", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "calculate",
            session: this.session,
            urlIds: { "order_id": this.order_id },
            params: Object.assign({ "shipping": shipping, "refund_line_items": refund_line_items, "currency": currency }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Refund = Refund;
    Refund.apiVersion = types_1.ApiVersion.January24;
    Refund.hasOne = {};
    Refund.hasMany = {
      "transactions": transaction_1.Transaction
    };
    Refund.paths = [
      { "http_method": "get", "operation": "get", "ids": ["order_id"], "path": "orders/<order_id>/refunds.json" },
      { "http_method": "get", "operation": "get", "ids": ["order_id", "id"], "path": "orders/<order_id>/refunds/<id>.json" },
      { "http_method": "post", "operation": "calculate", "ids": ["order_id"], "path": "orders/<order_id>/refunds/calculate.json" },
      { "http_method": "post", "operation": "post", "ids": ["order_id"], "path": "orders/<order_id>/refunds.json" }
    ];
    Refund.resourceNames = [
      {
        "singular": "refund",
        "plural": "refunds"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/order.js
var require_order = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/order.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Order = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var customer_1 = require_customer();
    var discount_code_1 = require_discount_code();
    var fulfillment_1 = require_fulfillment();
    var refund_1 = require_refund();
    var Order = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, ids = null, limit = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, processed_at_min = null, processed_at_max = null, attribution_app_id = null, status = null, financial_status = null, fulfillment_status = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "ids", "limit", "since_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "processed_at_min", "processed_at_max", "attribution_app_id", "status", "financial_status", "fulfillment_status", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "ids": ids, "limit": limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "processed_at_min": processed_at_min, "processed_at_max": processed_at_max, "attribution_app_id": attribution_app_id, "status": status, "financial_status": financial_status, "fulfillment_status": fulfillment_status, "fields": fields }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, status = null, financial_status = null, fulfillment_status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "status", "financial_status", "fulfillment_status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "status": status, "financial_status": financial_status, "fulfillment_status": fulfillment_status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      cancel(_a) {
        var { amount = null, currency = null, restock = null, reason = null, email = null, refund = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["amount", "currency", "restock", "reason", "email", "refund", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "cancel",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({ "amount": amount, "currency": currency, "restock": restock, "reason": reason, "email": email, "refund": refund }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      close(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "close",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      open(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "open",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Order = Order;
    Order.apiVersion = types_1.ApiVersion.January24;
    Order.hasOne = {
      "customer": customer_1.Customer
    };
    Order.hasMany = {
      "discount_codes": discount_code_1.DiscountCode,
      "fulfillments": fulfillment_1.Fulfillment,
      "refunds": refund_1.Refund
    };
    Order.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "orders/<id>.json" },
      { "http_method": "get", "operation": "count", "ids": [], "path": "orders/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "orders.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "orders/<id>.json" },
      { "http_method": "post", "operation": "cancel", "ids": ["id"], "path": "orders/<id>/cancel.json" },
      { "http_method": "post", "operation": "close", "ids": ["id"], "path": "orders/<id>/close.json" },
      { "http_method": "post", "operation": "open", "ids": ["id"], "path": "orders/<id>/open.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "orders.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "orders/<id>.json" }
    ];
    Order.resourceNames = [
      {
        "singular": "order",
        "plural": "orders"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/gift_card.js
var require_gift_card = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/gift_card.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GiftCard = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var GiftCard = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, status = null, limit = null, since_id = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "status", "limit", "since_id", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "status": status, "limit": limit, "since_id": since_id, "fields": fields }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ "status": status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      static search(_a) {
        var { session, order = null, query = null, limit = null, fields = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order", "query", "limit", "fields", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "search",
            session,
            urlIds: {},
            params: Object.assign({ "order": order, "query": query, "limit": limit, "fields": fields, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      disable(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "disable",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.GiftCard = GiftCard;
    GiftCard.apiVersion = types_1.ApiVersion.January24;
    GiftCard.hasOne = {};
    GiftCard.hasMany = {};
    GiftCard.paths = [
      { "http_method": "get", "operation": "count", "ids": [], "path": "gift_cards/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "gift_cards.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "gift_cards/<id>.json" },
      { "http_method": "get", "operation": "search", "ids": [], "path": "gift_cards/search.json" },
      { "http_method": "post", "operation": "disable", "ids": ["id"], "path": "gift_cards/<id>/disable.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "gift_cards.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "gift_cards/<id>.json" }
    ];
    GiftCard.resourceNames = [
      {
        "singular": "gift_card",
        "plural": "gift_cards"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/checkout.js
var require_checkout = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/checkout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Checkout = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var discount_code_1 = require_discount_code();
    var order_1 = require_order();
    var gift_card_1 = require_gift_card();
    var Checkout = class extends base_1.Base {
      static find({ session, token }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "token": token },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static shipping_rates(_a) {
        var { session, token } = _a, otherArgs = tslib_1.__rest(_a, ["session", "token"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "shipping_rates",
            session,
            urlIds: { "token": token },
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      complete(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "complete",
            session: this.session,
            urlIds: { "token": this.token },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Checkout = Checkout;
    Checkout.apiVersion = types_1.ApiVersion.January24;
    Checkout.hasOne = {
      "discount_code": discount_code_1.DiscountCode,
      "order": order_1.Order
    };
    Checkout.hasMany = {
      "gift_cards": gift_card_1.GiftCard
    };
    Checkout.paths = [
      { "http_method": "get", "operation": "get", "ids": ["token"], "path": "checkouts/<token>.json" },
      { "http_method": "get", "operation": "shipping_rates", "ids": ["token"], "path": "checkouts/<token>/shipping_rates.json" },
      { "http_method": "post", "operation": "complete", "ids": ["token"], "path": "checkouts/<token>/complete.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "checkouts.json" },
      { "http_method": "put", "operation": "put", "ids": ["token"], "path": "checkouts/<token>.json" }
    ];
    Checkout.primaryKey = "token";
    Checkout.resourceNames = [
      {
        "singular": "checkout",
        "plural": "checkouts"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/collect.js
var require_collect = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/collect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Collect = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Collect = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null, since_id = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "since_id", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "limit": limit, "since_id": since_id, "fields": fields }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Collect = Collect;
    Collect.apiVersion = types_1.ApiVersion.January24;
    Collect.hasOne = {};
    Collect.hasMany = {};
    Collect.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "collects/<id>.json" },
      { "http_method": "get", "operation": "count", "ids": [], "path": "collects/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "collects.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "collects/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "collects.json" }
    ];
    Collect.resourceNames = [
      {
        "singular": "collect",
        "plural": "collects"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/image.js
var require_image = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/image.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Image = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Image = class extends base_1.Base {
      static find({ session, id, product_id = null, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id, "product_id": product_id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id, product_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id, "product_id": product_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, product_id = null, since_id = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "product_id", "since_id", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "product_id": product_id },
            params: Object.assign({ "since_id": since_id, "fields": fields }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, product_id = null, since_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "product_id", "since_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: { "product_id": product_id },
            params: Object.assign({ "since_id": since_id }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Image = Image;
    Image.apiVersion = types_1.ApiVersion.January24;
    Image.hasOne = {};
    Image.hasMany = {};
    Image.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["product_id", "id"], "path": "products/<product_id>/images/<id>.json" },
      { "http_method": "get", "operation": "count", "ids": ["product_id"], "path": "products/<product_id>/images/count.json" },
      { "http_method": "get", "operation": "get", "ids": ["product_id"], "path": "products/<product_id>/images.json" },
      { "http_method": "get", "operation": "get", "ids": ["product_id", "id"], "path": "products/<product_id>/images/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": ["product_id"], "path": "products/<product_id>/images.json" },
      { "http_method": "put", "operation": "put", "ids": ["product_id", "id"], "path": "products/<product_id>/images/<id>.json" }
    ];
    Image.resourceNames = [
      {
        "singular": "image",
        "plural": "images"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/collection.js
var require_collection = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/collection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Collection = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var image_1 = require_image();
    var Collection = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static products(_a) {
        var { session, id, limit = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "id", "limit"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "products",
            session,
            urlIds: { "id": id },
            params: Object.assign({ "limit": limit }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Collection = Collection;
    Collection.apiVersion = types_1.ApiVersion.January24;
    Collection.hasOne = {
      "image": image_1.Image
    };
    Collection.hasMany = {};
    Collection.paths = [
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "collections/<id>.json" },
      { "http_method": "get", "operation": "products", "ids": ["id"], "path": "collections/<id>/products.json" }
    ];
    Collection.resourceNames = [
      {
        "singular": "collection",
        "plural": "collections"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/collection_listing.js
var require_collection_listing = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/collection_listing.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CollectionListing = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var image_1 = require_image();
    var CollectionListing = class extends base_1.Base {
      static find({ session, collection_id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "collection_id": collection_id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, collection_id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "collection_id": collection_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "limit": limit }, otherArgs)
          });
          return response;
        });
      }
      static product_ids(_a) {
        var { session, collection_id, limit = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "collection_id", "limit"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "product_ids",
            session,
            urlIds: { "collection_id": collection_id },
            params: Object.assign({ "limit": limit }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.CollectionListing = CollectionListing;
    CollectionListing.apiVersion = types_1.ApiVersion.January24;
    CollectionListing.hasOne = {
      "image": image_1.Image
    };
    CollectionListing.hasMany = {};
    CollectionListing.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["collection_id"], "path": "collection_listings/<collection_id>.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "collection_listings.json" },
      { "http_method": "get", "operation": "get", "ids": ["collection_id"], "path": "collection_listings/<collection_id>.json" },
      { "http_method": "get", "operation": "product_ids", "ids": ["collection_id"], "path": "collection_listings/<collection_id>/product_ids.json" },
      { "http_method": "put", "operation": "put", "ids": ["collection_id"], "path": "collection_listings/<collection_id>.json" }
    ];
    CollectionListing.primaryKey = "collection_id";
    CollectionListing.resourceNames = [
      {
        "singular": "collection_listing",
        "plural": "collection_listings"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/comment.js
var require_comment = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/comment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Comment = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Comment = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, limit = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, fields = null, published_status = null, status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "since_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "fields", "published_status", "status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "limit": limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "fields": fields, "published_status": published_status, "status": status }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status", "status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, "status": status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      approve(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "approve",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      not_spam(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "not_spam",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      remove(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "remove",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      restore(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "restore",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      spam(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "spam",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Comment = Comment;
    Comment.apiVersion = types_1.ApiVersion.January24;
    Comment.hasOne = {};
    Comment.hasMany = {};
    Comment.paths = [
      { "http_method": "get", "operation": "count", "ids": [], "path": "comments/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "comments.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "comments/<id>.json" },
      { "http_method": "post", "operation": "approve", "ids": ["id"], "path": "comments/<id>/approve.json" },
      { "http_method": "post", "operation": "not_spam", "ids": ["id"], "path": "comments/<id>/not_spam.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "comments.json" },
      { "http_method": "post", "operation": "remove", "ids": ["id"], "path": "comments/<id>/remove.json" },
      { "http_method": "post", "operation": "restore", "ids": ["id"], "path": "comments/<id>/restore.json" },
      { "http_method": "post", "operation": "spam", "ids": ["id"], "path": "comments/<id>/spam.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "comments/<id>.json" }
    ];
    Comment.resourceNames = [
      {
        "singular": "comment",
        "plural": "comments"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/province.js
var require_province = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/province.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Province = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Province = class extends base_1.Base {
      static find({ session, id, country_id = null, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id, "country_id": country_id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, country_id = null, since_id = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "country_id", "since_id", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "country_id": country_id },
            params: Object.assign({ "since_id": since_id, "fields": fields }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, country_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "country_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: { "country_id": country_id },
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Province = Province;
    Province.apiVersion = types_1.ApiVersion.January24;
    Province.hasOne = {};
    Province.hasMany = {};
    Province.paths = [
      { "http_method": "get", "operation": "count", "ids": ["country_id"], "path": "countries/<country_id>/provinces/count.json" },
      { "http_method": "get", "operation": "get", "ids": ["country_id"], "path": "countries/<country_id>/provinces.json" },
      { "http_method": "get", "operation": "get", "ids": ["country_id", "id"], "path": "countries/<country_id>/provinces/<id>.json" },
      { "http_method": "put", "operation": "put", "ids": ["country_id", "id"], "path": "countries/<country_id>/provinces/<id>.json" }
    ];
    Province.resourceNames = [
      {
        "singular": "province",
        "plural": "provinces"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/country.js
var require_country = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/country.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Country = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var province_1 = require_province();
    var Country = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, since_id = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "since_id", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "since_id": since_id, "fields": fields }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Country = Country;
    Country.apiVersion = types_1.ApiVersion.January24;
    Country.hasOne = {};
    Country.hasMany = {
      "provinces": province_1.Province
    };
    Country.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "countries/<id>.json" },
      { "http_method": "get", "operation": "count", "ids": [], "path": "countries/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "countries.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "countries/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "countries.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "countries/<id>.json" }
    ];
    Country.resourceNames = [
      {
        "singular": "country",
        "plural": "countries"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/custom_collection.js
var require_custom_collection = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/custom_collection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomCollection = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var CustomCollection = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null, ids = null, since_id = null, title = null, product_id = null, handle = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "ids", "since_id", "title", "product_id", "handle", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "limit": limit, "ids": ids, "since_id": since_id, "title": title, "product_id": product_id, "handle": handle, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, "fields": fields }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, title = null, product_id = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "title", "product_id", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ "title": title, "product_id": product_id, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.CustomCollection = CustomCollection;
    CustomCollection.apiVersion = types_1.ApiVersion.January24;
    CustomCollection.hasOne = {};
    CustomCollection.hasMany = {};
    CustomCollection.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "custom_collections/<id>.json" },
      { "http_method": "get", "operation": "count", "ids": [], "path": "custom_collections/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "custom_collections.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "custom_collections/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "custom_collections.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "custom_collections/<id>.json" }
    ];
    CustomCollection.resourceNames = [
      {
        "singular": "custom_collection",
        "plural": "custom_collections"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/customer_address.js
var require_customer_address = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/customer_address.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomerAddress = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var CustomerAddress = class extends base_1.Base {
      static getJsonBodyName() {
        return "address";
      }
      static find({ session, id, customer_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id, "customer_id": customer_id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id, customer_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id, "customer_id": customer_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, customer_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "customer_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "customer_id": customer_id },
            params: Object.assign({}, otherArgs)
          });
          return response;
        });
      }
      default(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "put",
            operation: "default",
            session: this.session,
            urlIds: { "id": this.id, "customer_id": this.customer_id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      set(_a) {
        var { address_ids = null, operation = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["address_ids", "operation", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "put",
            operation: "set",
            session: this.session,
            urlIds: { "customer_id": this.customer_id },
            params: Object.assign({ "address_ids": address_ids, "operation": operation }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.CustomerAddress = CustomerAddress;
    CustomerAddress.apiVersion = types_1.ApiVersion.January24;
    CustomerAddress.hasOne = {};
    CustomerAddress.hasMany = {};
    CustomerAddress.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["customer_id", "id"], "path": "customers/<customer_id>/addresses/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": ["customer_id"], "path": "customers/<customer_id>/addresses.json" },
      { "http_method": "get", "operation": "get", "ids": ["customer_id", "id"], "path": "customers/<customer_id>/addresses/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": ["customer_id"], "path": "customers/<customer_id>/addresses.json" },
      { "http_method": "put", "operation": "default", "ids": ["customer_id", "id"], "path": "customers/<customer_id>/addresses/<id>/default.json" },
      { "http_method": "put", "operation": "put", "ids": ["customer_id", "id"], "path": "customers/<customer_id>/addresses/<id>.json" },
      { "http_method": "put", "operation": "set", "ids": ["customer_id"], "path": "customers/<customer_id>/addresses/set.json" }
    ];
    CustomerAddress.resourceNames = [
      {
        "singular": "customer_address",
        "plural": "customer_addresses"
      },
      {
        "singular": "address",
        "plural": "addresses"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/deprecated_api_call.js
var require_deprecated_api_call = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/deprecated_api_call.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DeprecatedApiCall = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var DeprecatedApiCall = class extends base_1.Base {
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
          return response;
        });
      }
    };
    exports.DeprecatedApiCall = DeprecatedApiCall;
    DeprecatedApiCall.apiVersion = types_1.ApiVersion.January24;
    DeprecatedApiCall.hasOne = {};
    DeprecatedApiCall.hasMany = {};
    DeprecatedApiCall.paths = [
      { "http_method": "get", "operation": "get", "ids": [], "path": "deprecated_api_calls.json" }
    ];
    DeprecatedApiCall.resourceNames = [
      {
        "singular": "deprecated_api_call",
        "plural": "deprecated_api_calls"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/dispute.js
var require_dispute = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/dispute.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Dispute = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Dispute = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, since_id = null, last_id = null, status = null, initiated_at = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "since_id", "last_id", "status", "initiated_at"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "since_id": since_id, "last_id": last_id, "status": status, "initiated_at": initiated_at }, otherArgs)
          });
          return response;
        });
      }
    };
    exports.Dispute = Dispute;
    Dispute.apiVersion = types_1.ApiVersion.January24;
    Dispute.hasOne = {};
    Dispute.hasMany = {};
    Dispute.paths = [
      { "http_method": "get", "operation": "get", "ids": [], "path": "shopify_payments/disputes.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "shopify_payments/disputes/<id>.json" }
    ];
    Dispute.resourceNames = [
      {
        "singular": "dispute",
        "plural": "disputes"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/dispute_evidence.js
var require_dispute_evidence = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/dispute_evidence.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DisputeEvidence = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var fulfillment_1 = require_fulfillment();
    var DisputeEvidence = class extends base_1.Base {
      static find({ session, dispute_id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "dispute_id": dispute_id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
    };
    exports.DisputeEvidence = DisputeEvidence;
    DisputeEvidence.apiVersion = types_1.ApiVersion.January24;
    DisputeEvidence.hasOne = {};
    DisputeEvidence.hasMany = {
      "fulfillments": fulfillment_1.Fulfillment
    };
    DisputeEvidence.paths = [
      { "http_method": "get", "operation": "get", "ids": ["dispute_id"], "path": "shopify_payments/disputes/<dispute_id>/dispute_evidences.json" },
      { "http_method": "put", "operation": "put", "ids": ["dispute_id"], "path": "shopify_payments/disputes/<dispute_id>/dispute_evidences.json" }
    ];
    DisputeEvidence.primaryKey = "dispute_id";
    DisputeEvidence.resourceNames = [
      {
        "singular": "dispute_evidence",
        "plural": "dispute_evidences"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/dispute_file_upload.js
var require_dispute_file_upload = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/dispute_file_upload.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DisputeFileUpload = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var DisputeFileUpload = class extends base_1.Base {
      static delete({ session, id, dispute_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id, "dispute_id": dispute_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
    };
    exports.DisputeFileUpload = DisputeFileUpload;
    DisputeFileUpload.apiVersion = types_1.ApiVersion.January24;
    DisputeFileUpload.hasOne = {};
    DisputeFileUpload.hasMany = {};
    DisputeFileUpload.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["dispute_id", "id"], "path": "shopify_payments/disputes/<dispute_id>/dispute_file_uploads/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": ["dispute_id"], "path": "shopify_payments/disputes/<dispute_id>/dispute_file_uploads.json" }
    ];
    DisputeFileUpload.resourceNames = [
      {
        "singular": "dispute_file_upload",
        "plural": "dispute_file_uploads"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/draft_order.js
var require_draft_order = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/draft_order.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DraftOrder = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var customer_1 = require_customer();
    var DraftOrder = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, fields = null, limit = null, since_id = null, updated_at_min = null, updated_at_max = null, ids = null, status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "fields", "limit", "since_id", "updated_at_min", "updated_at_max", "ids", "status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "fields": fields, "limit": limit, "since_id": since_id, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "ids": ids, "status": status }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, since_id = null, status = null, updated_at_max = null, updated_at_min = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "since_id", "status", "updated_at_max", "updated_at_min"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ "since_id": since_id, "status": status, "updated_at_max": updated_at_max, "updated_at_min": updated_at_min }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      send_invoice(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "send_invoice",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      complete(_a) {
        var { payment_gateway_id = null, payment_pending = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["payment_gateway_id", "payment_pending", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "put",
            operation: "complete",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({ "payment_gateway_id": payment_gateway_id, "payment_pending": payment_pending }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.DraftOrder = DraftOrder;
    DraftOrder.apiVersion = types_1.ApiVersion.January24;
    DraftOrder.hasOne = {
      "customer": customer_1.Customer
    };
    DraftOrder.hasMany = {};
    DraftOrder.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "draft_orders/<id>.json" },
      { "http_method": "get", "operation": "count", "ids": [], "path": "draft_orders/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "draft_orders.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "draft_orders/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "draft_orders.json" },
      { "http_method": "post", "operation": "send_invoice", "ids": ["id"], "path": "draft_orders/<id>/send_invoice.json" },
      { "http_method": "put", "operation": "complete", "ids": ["id"], "path": "draft_orders/<id>/complete.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "draft_orders/<id>.json" }
    ];
    DraftOrder.resourceNames = [
      {
        "singular": "draft_order",
        "plural": "draft_orders"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/event.js
var require_event = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/event.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Event = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Event = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, order_id = null, product_id = null, limit = null, since_id = null, created_at_min = null, created_at_max = null, filter = null, verb = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order_id", "product_id", "limit", "since_id", "created_at_min", "created_at_max", "filter", "verb", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "order_id": order_id, "product_id": product_id },
            params: Object.assign({ "limit": limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "filter": filter, "verb": verb, "fields": fields }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, created_at_min = null, created_at_max = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "created_at_min", "created_at_max"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ "created_at_min": created_at_min, "created_at_max": created_at_max }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Event = Event;
    Event.apiVersion = types_1.ApiVersion.January24;
    Event.hasOne = {};
    Event.hasMany = {};
    Event.paths = [
      { "http_method": "get", "operation": "count", "ids": [], "path": "events/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "events.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "events/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": ["order_id"], "path": "orders/<order_id>/events.json" },
      { "http_method": "get", "operation": "get", "ids": ["product_id"], "path": "products/<product_id>/events.json" }
    ];
    Event.resourceNames = [
      {
        "singular": "event",
        "plural": "events"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/fulfillment_event.js
var require_fulfillment_event = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/fulfillment_event.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FulfillmentEvent = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var country_1 = require_country();
    var province_1 = require_province();
    var FulfillmentEvent = class extends base_1.Base {
      static getJsonBodyName() {
        return "event";
      }
      static find({ session, id, order_id = null, fulfillment_id = null, event_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id, "order_id": order_id, "fulfillment_id": fulfillment_id },
            params: { "event_id": event_id }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id, order_id = null, fulfillment_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id, "order_id": order_id, "fulfillment_id": fulfillment_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, order_id = null, fulfillment_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order_id", "fulfillment_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "order_id": order_id, "fulfillment_id": fulfillment_id },
            params: Object.assign({}, otherArgs)
          });
          return response;
        });
      }
    };
    exports.FulfillmentEvent = FulfillmentEvent;
    FulfillmentEvent.apiVersion = types_1.ApiVersion.January24;
    FulfillmentEvent.hasOne = {
      "country": country_1.Country,
      "province": province_1.Province
    };
    FulfillmentEvent.hasMany = {};
    FulfillmentEvent.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["order_id", "fulfillment_id", "id"], "path": "orders/<order_id>/fulfillments/<fulfillment_id>/events/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": ["order_id", "fulfillment_id"], "path": "orders/<order_id>/fulfillments/<fulfillment_id>/events.json" },
      { "http_method": "get", "operation": "get", "ids": ["order_id", "fulfillment_id", "id"], "path": "orders/<order_id>/fulfillments/<fulfillment_id>/events/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": ["order_id", "fulfillment_id"], "path": "orders/<order_id>/fulfillments/<fulfillment_id>/events.json" }
    ];
    FulfillmentEvent.resourceNames = [
      {
        "singular": "fulfillment_event",
        "plural": "fulfillment_events"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/fulfillment_order.js
var require_fulfillment_order = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/fulfillment_order.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FulfillmentOrder = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var FulfillmentOrder = class extends base_1.Base {
      static find({ session, id, include_financial_summaries = null, include_order_reference_fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "include_financial_summaries": include_financial_summaries, "include_order_reference_fields": include_order_reference_fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, order_id = null, include_financial_summaries = null, include_order_reference_fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order_id", "include_financial_summaries", "include_order_reference_fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "order_id": order_id },
            params: Object.assign({ "include_financial_summaries": include_financial_summaries, "include_order_reference_fields": include_order_reference_fields }, otherArgs)
          });
          return response;
        });
      }
      cancel(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "cancel",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      close(_a) {
        var { message = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["message", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "close",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({ "message": message }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      hold(_a) {
        var { fulfillment_hold = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["fulfillment_hold", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "hold",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({ "fulfillment_hold": fulfillment_hold }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      move(_a) {
        var { fulfillment_order = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["fulfillment_order", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "move",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({ "fulfillment_order": fulfillment_order }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      open(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "open",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      release_hold(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "release_hold",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      reschedule(_a) {
        var { new_fulfill_at = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["new_fulfill_at", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "reschedule",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({ "new_fulfill_at": new_fulfill_at }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      set_fulfillment_orders_deadline(_a) {
        var { fulfillment_order_ids = null, fulfillment_deadline = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["fulfillment_order_ids", "fulfillment_deadline", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "set_fulfillment_orders_deadline",
            session: this.session,
            urlIds: {},
            params: Object.assign({ "fulfillment_order_ids": fulfillment_order_ids, "fulfillment_deadline": fulfillment_deadline }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.FulfillmentOrder = FulfillmentOrder;
    FulfillmentOrder.apiVersion = types_1.ApiVersion.January24;
    FulfillmentOrder.hasOne = {};
    FulfillmentOrder.hasMany = {};
    FulfillmentOrder.paths = [
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "fulfillment_orders/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": ["order_id"], "path": "orders/<order_id>/fulfillment_orders.json" },
      { "http_method": "post", "operation": "cancel", "ids": ["id"], "path": "fulfillment_orders/<id>/cancel.json" },
      { "http_method": "post", "operation": "close", "ids": ["id"], "path": "fulfillment_orders/<id>/close.json" },
      { "http_method": "post", "operation": "hold", "ids": ["id"], "path": "fulfillment_orders/<id>/hold.json" },
      { "http_method": "post", "operation": "move", "ids": ["id"], "path": "fulfillment_orders/<id>/move.json" },
      { "http_method": "post", "operation": "open", "ids": ["id"], "path": "fulfillment_orders/<id>/open.json" },
      { "http_method": "post", "operation": "release_hold", "ids": ["id"], "path": "fulfillment_orders/<id>/release_hold.json" },
      { "http_method": "post", "operation": "reschedule", "ids": ["id"], "path": "fulfillment_orders/<id>/reschedule.json" },
      { "http_method": "post", "operation": "set_fulfillment_orders_deadline", "ids": [], "path": "fulfillment_orders/set_fulfillment_orders_deadline.json" }
    ];
    FulfillmentOrder.resourceNames = [
      {
        "singular": "fulfillment_order",
        "plural": "fulfillment_orders"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/fulfillment_request.js
var require_fulfillment_request = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/fulfillment_request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FulfillmentRequest = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var FulfillmentRequest = class extends base_1.Base {
      accept(_a) {
        var { message = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["message", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "accept",
            session: this.session,
            urlIds: { "fulfillment_order_id": this.fulfillment_order_id },
            params: Object.assign({ "message": message }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      reject(_a) {
        var { message = null, reason = null, line_items = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["message", "reason", "line_items", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "reject",
            session: this.session,
            urlIds: { "fulfillment_order_id": this.fulfillment_order_id },
            params: Object.assign({ "message": message, "reason": reason, "line_items": line_items }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.FulfillmentRequest = FulfillmentRequest;
    FulfillmentRequest.apiVersion = types_1.ApiVersion.January24;
    FulfillmentRequest.hasOne = {};
    FulfillmentRequest.hasMany = {};
    FulfillmentRequest.paths = [
      { "http_method": "post", "operation": "accept", "ids": ["fulfillment_order_id"], "path": "fulfillment_orders/<fulfillment_order_id>/fulfillment_request/accept.json" },
      { "http_method": "post", "operation": "post", "ids": ["fulfillment_order_id"], "path": "fulfillment_orders/<fulfillment_order_id>/fulfillment_request.json" },
      { "http_method": "post", "operation": "reject", "ids": ["fulfillment_order_id"], "path": "fulfillment_orders/<fulfillment_order_id>/fulfillment_request/reject.json" }
    ];
    FulfillmentRequest.resourceNames = [
      {
        "singular": "submitted_fulfillment_order",
        "plural": "submitted_fulfillment_orders"
      },
      {
        "singular": "fulfillment_order",
        "plural": "fulfillment_orders"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/fulfillment_service.js
var require_fulfillment_service = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/fulfillment_service.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FulfillmentService = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var FulfillmentService = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, scope = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "scope"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "scope": scope }, otherArgs)
          });
          return response;
        });
      }
    };
    exports.FulfillmentService = FulfillmentService;
    FulfillmentService.apiVersion = types_1.ApiVersion.January24;
    FulfillmentService.hasOne = {};
    FulfillmentService.hasMany = {};
    FulfillmentService.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "fulfillment_services/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "fulfillment_services.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "fulfillment_services/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "fulfillment_services.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "fulfillment_services/<id>.json" }
    ];
    FulfillmentService.resourceNames = [
      {
        "singular": "fulfillment_service",
        "plural": "fulfillment_services"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/gift_card_adjustment.js
var require_gift_card_adjustment = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/gift_card_adjustment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GiftCardAdjustment = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var GiftCardAdjustment = class extends base_1.Base {
      static getJsonBodyName() {
        return "adjustment";
      }
      static find({ session, id, gift_card_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id, "gift_card_id": gift_card_id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, gift_card_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "gift_card_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "gift_card_id": gift_card_id },
            params: Object.assign({}, otherArgs)
          });
          return response;
        });
      }
    };
    exports.GiftCardAdjustment = GiftCardAdjustment;
    GiftCardAdjustment.apiVersion = types_1.ApiVersion.January24;
    GiftCardAdjustment.hasOne = {};
    GiftCardAdjustment.hasMany = {};
    GiftCardAdjustment.paths = [
      { "http_method": "get", "operation": "get", "ids": ["gift_card_id"], "path": "gift_cards/<gift_card_id>/adjustments.json" },
      { "http_method": "get", "operation": "get", "ids": ["gift_card_id", "id"], "path": "gift_cards/<gift_card_id>/adjustments/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": ["gift_card_id"], "path": "gift_cards/<gift_card_id>/adjustments.json" }
    ];
    GiftCardAdjustment.resourceNames = [
      {
        "singular": "gift_card_adjustment",
        "plural": "gift_card_adjustments"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/inventory_item.js
var require_inventory_item = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/inventory_item.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InventoryItem = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var InventoryItem = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, ids = null, limit = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "ids", "limit"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "ids": ids, "limit": limit }, otherArgs)
          });
          return response;
        });
      }
    };
    exports.InventoryItem = InventoryItem;
    InventoryItem.apiVersion = types_1.ApiVersion.January24;
    InventoryItem.hasOne = {};
    InventoryItem.hasMany = {};
    InventoryItem.paths = [
      { "http_method": "get", "operation": "get", "ids": [], "path": "inventory_items.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "inventory_items/<id>.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "inventory_items/<id>.json" }
    ];
    InventoryItem.resourceNames = [
      {
        "singular": "inventory_item",
        "plural": "inventory_items"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/inventory_level.js
var require_inventory_level = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/inventory_level.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InventoryLevel = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var InventoryLevel = class extends base_1.Base {
      static delete({ session, inventory_item_id = null, location_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: {},
            params: { "inventory_item_id": inventory_item_id, "location_id": location_id }
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, inventory_item_ids = null, location_ids = null, limit = null, updated_at_min = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "inventory_item_ids", "location_ids", "limit", "updated_at_min"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "inventory_item_ids": inventory_item_ids, "location_ids": location_ids, "limit": limit, "updated_at_min": updated_at_min }, otherArgs)
          });
          return response;
        });
      }
      adjust(_a) {
        var { inventory_item_id = null, location_id = null, available_adjustment = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["inventory_item_id", "location_id", "available_adjustment", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "adjust",
            session: this.session,
            urlIds: {},
            params: Object.assign({ "inventory_item_id": inventory_item_id, "location_id": location_id, "available_adjustment": available_adjustment }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      connect(_a) {
        var { inventory_item_id = null, location_id = null, relocate_if_necessary = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["inventory_item_id", "location_id", "relocate_if_necessary", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "connect",
            session: this.session,
            urlIds: {},
            params: Object.assign({ "inventory_item_id": inventory_item_id, "location_id": location_id, "relocate_if_necessary": relocate_if_necessary }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
      set(_a) {
        var { inventory_item_id = null, location_id = null, available = null, disconnect_if_necessary = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["inventory_item_id", "location_id", "available", "disconnect_if_necessary", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "set",
            session: this.session,
            urlIds: {},
            params: Object.assign({ "inventory_item_id": inventory_item_id, "location_id": location_id, "available": available, "disconnect_if_necessary": disconnect_if_necessary }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.InventoryLevel = InventoryLevel;
    InventoryLevel.apiVersion = types_1.ApiVersion.January24;
    InventoryLevel.hasOne = {};
    InventoryLevel.hasMany = {};
    InventoryLevel.paths = [
      { "http_method": "delete", "operation": "delete", "ids": [], "path": "inventory_levels.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "inventory_levels.json" },
      { "http_method": "post", "operation": "adjust", "ids": [], "path": "inventory_levels/adjust.json" },
      { "http_method": "post", "operation": "connect", "ids": [], "path": "inventory_levels/connect.json" },
      { "http_method": "post", "operation": "set", "ids": [], "path": "inventory_levels/set.json" }
    ];
    InventoryLevel.resourceNames = [
      {
        "singular": "inventory_level",
        "plural": "inventory_levels"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/location.js
var require_location = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/location.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Location = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Location = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      static inventory_levels(_a) {
        var { session, id } = _a, otherArgs = tslib_1.__rest(_a, ["session", "id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "inventory_levels",
            session,
            urlIds: { "id": id },
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Location = Location;
    Location.apiVersion = types_1.ApiVersion.January24;
    Location.hasOne = {};
    Location.hasMany = {};
    Location.paths = [
      { "http_method": "get", "operation": "count", "ids": [], "path": "locations/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "locations.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "locations/<id>.json" },
      { "http_method": "get", "operation": "inventory_levels", "ids": ["id"], "path": "locations/<id>/inventory_levels.json" }
    ];
    Location.resourceNames = [
      {
        "singular": "location",
        "plural": "locations"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/locations_for_move.js
var require_locations_for_move = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/locations_for_move.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LocationsForMove = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var LocationsForMove = class extends base_1.Base {
      static all(_a) {
        var { session, fulfillment_order_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "fulfillment_order_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "fulfillment_order_id": fulfillment_order_id },
            params: Object.assign({}, otherArgs)
          });
          return response;
        });
      }
    };
    exports.LocationsForMove = LocationsForMove;
    LocationsForMove.apiVersion = types_1.ApiVersion.January24;
    LocationsForMove.hasOne = {};
    LocationsForMove.hasMany = {};
    LocationsForMove.paths = [
      { "http_method": "get", "operation": "get", "ids": ["fulfillment_order_id"], "path": "fulfillment_orders/<fulfillment_order_id>/locations_for_move.json" }
    ];
    LocationsForMove.resourceNames = [
      {
        "singular": "locations_for_move",
        "plural": "locations_for_moves"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/marketing_event.js
var require_marketing_event = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/marketing_event.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MarketingEvent = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var MarketingEvent = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null, offset = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "offset"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "limit": limit, "offset": offset }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      engagements(_a) {
        var { occurred_on = null, impressions_count = null, views_count = null, clicks_count = null, shares_count = null, favorites_count = null, comments_count = null, ad_spend = null, is_cumulative = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["occurred_on", "impressions_count", "views_count", "clicks_count", "shares_count", "favorites_count", "comments_count", "ad_spend", "is_cumulative", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "post",
            operation: "engagements",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({ "occurred_on": occurred_on, "impressions_count": impressions_count, "views_count": views_count, "clicks_count": clicks_count, "shares_count": shares_count, "favorites_count": favorites_count, "comments_count": comments_count, "ad_spend": ad_spend, "is_cumulative": is_cumulative }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.MarketingEvent = MarketingEvent;
    MarketingEvent.apiVersion = types_1.ApiVersion.January24;
    MarketingEvent.hasOne = {};
    MarketingEvent.hasMany = {};
    MarketingEvent.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "marketing_events/<id>.json" },
      { "http_method": "get", "operation": "count", "ids": [], "path": "marketing_events/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "marketing_events.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "marketing_events/<id>.json" },
      { "http_method": "post", "operation": "engagements", "ids": ["id"], "path": "marketing_events/<id>/engagements.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "marketing_events.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "marketing_events/<id>.json" }
    ];
    MarketingEvent.resourceNames = [
      {
        "singular": "marketing_event",
        "plural": "marketing_events"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/mobile_platform_application.js
var require_mobile_platform_application = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/mobile_platform_application.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MobilePlatformApplication = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var MobilePlatformApplication = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
          return response;
        });
      }
    };
    exports.MobilePlatformApplication = MobilePlatformApplication;
    MobilePlatformApplication.apiVersion = types_1.ApiVersion.January24;
    MobilePlatformApplication.hasOne = {};
    MobilePlatformApplication.hasMany = {};
    MobilePlatformApplication.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "mobile_platform_applications/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "mobile_platform_applications.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "mobile_platform_applications/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "mobile_platform_applications.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "mobile_platform_applications/<id>.json" }
    ];
    MobilePlatformApplication.resourceNames = [
      {
        "singular": "mobile_platform_application",
        "plural": "mobile_platform_applications"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/order_risk.js
var require_order_risk = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/order_risk.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OrderRisk = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var OrderRisk = class extends base_1.Base {
      static getJsonBodyName() {
        return "risk";
      }
      static find({ session, id, order_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id, "order_id": order_id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id, order_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id, "order_id": order_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, order_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "order_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "order_id": order_id },
            params: Object.assign({}, otherArgs)
          });
          return response;
        });
      }
    };
    exports.OrderRisk = OrderRisk;
    OrderRisk.apiVersion = types_1.ApiVersion.January24;
    OrderRisk.hasOne = {};
    OrderRisk.hasMany = {};
    OrderRisk.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["order_id", "id"], "path": "orders/<order_id>/risks/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": ["order_id"], "path": "orders/<order_id>/risks.json" },
      { "http_method": "get", "operation": "get", "ids": ["order_id", "id"], "path": "orders/<order_id>/risks/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": ["order_id"], "path": "orders/<order_id>/risks.json" },
      { "http_method": "put", "operation": "put", "ids": ["order_id", "id"], "path": "orders/<order_id>/risks/<id>.json" }
    ];
    OrderRisk.resourceNames = [
      {
        "singular": "risk",
        "plural": "risks"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/page.js
var require_page = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/page.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Page = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var metafield_1 = require_metafield();
    var Page = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null, since_id = null, title = null, handle = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, fields = null, published_status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "since_id", "title", "handle", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "fields", "published_status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "limit": limit, "since_id": since_id, "title": title, "handle": handle, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "fields": fields, "published_status": published_status }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, title = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "title", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ "title": title, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Page = Page;
    Page.apiVersion = types_1.ApiVersion.January24;
    Page.hasOne = {
      "metafield": metafield_1.Metafield
    };
    Page.hasMany = {};
    Page.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "pages/<id>.json" },
      { "http_method": "get", "operation": "count", "ids": [], "path": "pages/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "pages.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "pages/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "pages.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "pages/<id>.json" }
    ];
    Page.resourceNames = [
      {
        "singular": "page",
        "plural": "pages"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/payment.js
var require_payment = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/payment.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Payment = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var transaction_1 = require_transaction();
    var checkout_1 = require_checkout();
    var Payment = class extends base_1.Base {
      static find({ session, id, checkout_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id, "checkout_id": checkout_id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, checkout_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "checkout_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "checkout_id": checkout_id },
            params: Object.assign({}, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, checkout_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "checkout_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: { "checkout_id": checkout_id },
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Payment = Payment;
    Payment.apiVersion = types_1.ApiVersion.January24;
    Payment.hasOne = {
      "transaction": transaction_1.Transaction,
      "checkout": checkout_1.Checkout
    };
    Payment.hasMany = {};
    Payment.paths = [
      { "http_method": "get", "operation": "count", "ids": ["checkout_id"], "path": "checkouts/<checkout_id>/payments/count.json" },
      { "http_method": "get", "operation": "get", "ids": ["checkout_id"], "path": "checkouts/<checkout_id>/payments.json" },
      { "http_method": "get", "operation": "get", "ids": ["checkout_id", "id"], "path": "checkouts/<checkout_id>/payments/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": ["checkout_id"], "path": "checkouts/<checkout_id>/payments.json" }
    ];
    Payment.resourceNames = [
      {
        "singular": "payment",
        "plural": "payments"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/payment_gateway.js
var require_payment_gateway = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/payment_gateway.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PaymentGateway = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var PaymentGateway = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
          return response;
        });
      }
    };
    exports.PaymentGateway = PaymentGateway;
    PaymentGateway.apiVersion = types_1.ApiVersion.January24;
    PaymentGateway.hasOne = {};
    PaymentGateway.hasMany = {};
    PaymentGateway.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "payment_gateways/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "payment_gateways.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "payment_gateways/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "payment_gateways.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "payment_gateways/<id>.json" }
    ];
    PaymentGateway.resourceNames = [
      {
        "singular": "payment_gateway",
        "plural": "payment_gateways"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/payment_transaction.js
var require_payment_transaction = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/payment_transaction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PaymentTransaction = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var currency_1 = require_currency();
    var PaymentTransaction = class extends base_1.Base {
      static transactions(_a) {
        var { session, since_id = null, last_id = null, test = null, payout_id = null, payout_status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "since_id", "last_id", "test", "payout_id", "payout_status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "transactions",
            session,
            urlIds: {},
            params: Object.assign({ "since_id": since_id, "last_id": last_id, "test": test, "payout_id": payout_id, "payout_status": payout_status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.PaymentTransaction = PaymentTransaction;
    PaymentTransaction.apiVersion = types_1.ApiVersion.January24;
    PaymentTransaction.hasOne = {
      "currency": currency_1.Currency
    };
    PaymentTransaction.hasMany = {};
    PaymentTransaction.paths = [
      { "http_method": "get", "operation": "transactions", "ids": [], "path": "shopify_payments/balance/transactions.json" }
    ];
    PaymentTransaction.resourceNames = [
      {
        "singular": "payment_transaction",
        "plural": "payment_transactions"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/payout.js
var require_payout = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/payout.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Payout = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Payout = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, since_id = null, last_id = null, date_min = null, date_max = null, date = null, status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "since_id", "last_id", "date_min", "date_max", "date", "status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "since_id": since_id, "last_id": last_id, "date_min": date_min, "date_max": date_max, "date": date, "status": status }, otherArgs)
          });
          return response;
        });
      }
    };
    exports.Payout = Payout;
    Payout.apiVersion = types_1.ApiVersion.January24;
    Payout.hasOne = {};
    Payout.hasMany = {};
    Payout.paths = [
      { "http_method": "get", "operation": "get", "ids": [], "path": "shopify_payments/payouts.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "shopify_payments/payouts/<id>.json" }
    ];
    Payout.resourceNames = [
      {
        "singular": "payout",
        "plural": "payouts"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/policy.js
var require_policy = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/policy.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Policy = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Policy = class extends base_1.Base {
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
          return response;
        });
      }
    };
    exports.Policy = Policy;
    Policy.apiVersion = types_1.ApiVersion.January24;
    Policy.hasOne = {};
    Policy.hasMany = {};
    Policy.paths = [
      { "http_method": "get", "operation": "get", "ids": [], "path": "policies.json" }
    ];
    Policy.resourceNames = [
      {
        "singular": "policy",
        "plural": "policies"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/price_rule.js
var require_price_rule = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/price_rule.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PriceRule = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var PriceRule = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, starts_at_min = null, starts_at_max = null, ends_at_min = null, ends_at_max = null, times_used = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "since_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "starts_at_min", "starts_at_max", "ends_at_min", "ends_at_max", "times_used"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "limit": limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "starts_at_min": starts_at_min, "starts_at_max": starts_at_max, "ends_at_min": ends_at_min, "ends_at_max": ends_at_max, "times_used": times_used }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.PriceRule = PriceRule;
    PriceRule.apiVersion = types_1.ApiVersion.January24;
    PriceRule.hasOne = {};
    PriceRule.hasMany = {};
    PriceRule.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "price_rules/<id>.json" },
      { "http_method": "get", "operation": "count", "ids": [], "path": "price_rules/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "price_rules.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "price_rules/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "price_rules.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "price_rules/<id>.json" }
    ];
    PriceRule.resourceNames = [
      {
        "singular": "price_rule",
        "plural": "price_rules"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/variant.js
var require_variant = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/variant.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Variant = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Variant = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id, product_id = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id, "product_id": product_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, product_id = null, limit = null, presentment_currencies = null, since_id = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "product_id", "limit", "presentment_currencies", "since_id", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "product_id": product_id },
            params: Object.assign({ "limit": limit, "presentment_currencies": presentment_currencies, "since_id": since_id, "fields": fields }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, product_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "product_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: { "product_id": product_id },
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Variant = Variant;
    Variant.apiVersion = types_1.ApiVersion.January24;
    Variant.hasOne = {};
    Variant.hasMany = {};
    Variant.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["product_id", "id"], "path": "products/<product_id>/variants/<id>.json" },
      { "http_method": "get", "operation": "count", "ids": ["product_id"], "path": "products/<product_id>/variants/count.json" },
      { "http_method": "get", "operation": "get", "ids": ["product_id"], "path": "products/<product_id>/variants.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "variants/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": ["product_id"], "path": "products/<product_id>/variants.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "variants/<id>.json" }
    ];
    Variant.readOnlyAttributes = [
      "inventory_quantity"
    ];
    Variant.resourceNames = [
      {
        "singular": "variant",
        "plural": "variants"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/product.js
var require_product = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/product.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Product = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var image_1 = require_image();
    var variant_1 = require_variant();
    var Product = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, ids = null, limit = null, since_id = null, title = null, vendor = null, handle = null, product_type = null, status = null, collection_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, fields = null, presentment_currencies = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "ids", "limit", "since_id", "title", "vendor", "handle", "product_type", "status", "collection_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status", "fields", "presentment_currencies"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "ids": ids, "limit": limit, "since_id": since_id, "title": title, "vendor": vendor, "handle": handle, "product_type": product_type, "status": status, "collection_id": collection_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, "fields": fields, "presentment_currencies": presentment_currencies }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, vendor = null, product_type = null, collection_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "vendor", "product_type", "collection_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ "vendor": vendor, "product_type": product_type, "collection_id": collection_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Product = Product;
    Product.apiVersion = types_1.ApiVersion.January24;
    Product.hasOne = {};
    Product.hasMany = {
      "images": image_1.Image,
      "variants": variant_1.Variant
    };
    Product.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "products/<id>.json" },
      { "http_method": "get", "operation": "count", "ids": [], "path": "products/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "products.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "products/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "products.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "products/<id>.json" }
    ];
    Product.resourceNames = [
      {
        "singular": "product",
        "plural": "products"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/product_listing.js
var require_product_listing = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/product_listing.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProductListing = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var image_1 = require_image();
    var variant_1 = require_variant();
    var ProductListing = class extends base_1.Base {
      static find({ session, product_id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "product_id": product_id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, product_id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "product_id": product_id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, product_ids = null, limit = null, collection_id = null, updated_at_min = null, handle = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "product_ids", "limit", "collection_id", "updated_at_min", "handle"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "product_ids": product_ids, "limit": limit, "collection_id": collection_id, "updated_at_min": updated_at_min, "handle": handle }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      static product_ids(_a) {
        var { session, limit = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "product_ids",
            session,
            urlIds: {},
            params: Object.assign({ "limit": limit }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.ProductListing = ProductListing;
    ProductListing.apiVersion = types_1.ApiVersion.January24;
    ProductListing.hasOne = {};
    ProductListing.hasMany = {
      "images": image_1.Image,
      "variants": variant_1.Variant
    };
    ProductListing.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["product_id"], "path": "product_listings/<product_id>.json" },
      { "http_method": "get", "operation": "count", "ids": [], "path": "product_listings/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "product_listings.json" },
      { "http_method": "get", "operation": "get", "ids": ["product_id"], "path": "product_listings/<product_id>.json" },
      { "http_method": "get", "operation": "product_ids", "ids": [], "path": "product_listings/product_ids.json" },
      { "http_method": "put", "operation": "put", "ids": ["product_id"], "path": "product_listings/<product_id>.json" }
    ];
    ProductListing.primaryKey = "product_id";
    ProductListing.resourceNames = [
      {
        "singular": "product_listing",
        "plural": "product_listings"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/product_resource_feedback.js
var require_product_resource_feedback = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/product_resource_feedback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ProductResourceFeedback = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var ProductResourceFeedback = class extends base_1.Base {
      static getJsonBodyName() {
        return "resource_feedback";
      }
      static all(_a) {
        var { session, product_id = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "product_id"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "product_id": product_id },
            params: Object.assign({}, otherArgs)
          });
          return response;
        });
      }
    };
    exports.ProductResourceFeedback = ProductResourceFeedback;
    ProductResourceFeedback.apiVersion = types_1.ApiVersion.January24;
    ProductResourceFeedback.hasOne = {};
    ProductResourceFeedback.hasMany = {};
    ProductResourceFeedback.paths = [
      { "http_method": "get", "operation": "get", "ids": ["product_id"], "path": "products/<product_id>/resource_feedback.json" },
      { "http_method": "post", "operation": "post", "ids": ["product_id"], "path": "products/<product_id>/resource_feedback.json" }
    ];
    ProductResourceFeedback.resourceNames = [
      {
        "singular": "product_resource_feedback",
        "plural": "product_resource_feedbacks"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/recurring_application_charge.js
var require_recurring_application_charge = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/recurring_application_charge.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RecurringApplicationCharge = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var currency_1 = require_currency();
    var RecurringApplicationCharge = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, since_id = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "since_id", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "since_id": since_id, "fields": fields }, otherArgs)
          });
          return response;
        });
      }
      customize(_a) {
        var { body = null } = _a, otherArgs = tslib_1.__rest(_a, ["body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "put",
            operation: "customize",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({}, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.RecurringApplicationCharge = RecurringApplicationCharge;
    RecurringApplicationCharge.apiVersion = types_1.ApiVersion.January24;
    RecurringApplicationCharge.hasOne = {
      "currency": currency_1.Currency
    };
    RecurringApplicationCharge.hasMany = {};
    RecurringApplicationCharge.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "recurring_application_charges/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "recurring_application_charges.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "recurring_application_charges/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "recurring_application_charges.json" },
      { "http_method": "put", "operation": "customize", "ids": ["id"], "path": "recurring_application_charges/<id>/customize.json" }
    ];
    RecurringApplicationCharge.resourceNames = [
      {
        "singular": "recurring_application_charge",
        "plural": "recurring_application_charges"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/redirect.js
var require_redirect = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/redirect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Redirect = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Redirect = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null, since_id = null, path = null, target = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "since_id", "path", "target", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "limit": limit, "since_id": since_id, "path": path, "target": target, "fields": fields }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, path = null, target = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "path", "target"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ "path": path, "target": target }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Redirect = Redirect;
    Redirect.apiVersion = types_1.ApiVersion.January24;
    Redirect.hasOne = {};
    Redirect.hasMany = {};
    Redirect.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "redirects/<id>.json" },
      { "http_method": "get", "operation": "count", "ids": [], "path": "redirects/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "redirects.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "redirects/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "redirects.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "redirects/<id>.json" }
    ];
    Redirect.resourceNames = [
      {
        "singular": "redirect",
        "plural": "redirects"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/report.js
var require_report = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/report.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Report = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Report = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, ids = null, limit = null, since_id = null, updated_at_min = null, updated_at_max = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "ids", "limit", "since_id", "updated_at_min", "updated_at_max", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "ids": ids, "limit": limit, "since_id": since_id, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "fields": fields }, otherArgs)
          });
          return response;
        });
      }
    };
    exports.Report = Report;
    Report.apiVersion = types_1.ApiVersion.January24;
    Report.hasOne = {};
    Report.hasMany = {};
    Report.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "reports/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "reports.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "reports/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "reports.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "reports/<id>.json" }
    ];
    Report.resourceNames = [
      {
        "singular": "report",
        "plural": "reports"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/resource_feedback.js
var require_resource_feedback = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/resource_feedback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ResourceFeedback = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var ResourceFeedback = class extends base_1.Base {
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
          return response;
        });
      }
    };
    exports.ResourceFeedback = ResourceFeedback;
    ResourceFeedback.apiVersion = types_1.ApiVersion.January24;
    ResourceFeedback.hasOne = {};
    ResourceFeedback.hasMany = {};
    ResourceFeedback.paths = [
      { "http_method": "get", "operation": "get", "ids": [], "path": "resource_feedback.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "resource_feedback.json" }
    ];
    ResourceFeedback.resourceNames = [
      {
        "singular": "resource_feedback",
        "plural": "resource_feedbacks"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/script_tag.js
var require_script_tag = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/script_tag.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ScriptTag = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var ScriptTag = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null, since_id = null, created_at_min = null, created_at_max = null, updated_at_min = null, updated_at_max = null, src = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "since_id", "created_at_min", "created_at_max", "updated_at_min", "updated_at_max", "src", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "limit": limit, "since_id": since_id, "created_at_min": created_at_min, "created_at_max": created_at_max, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "src": src, "fields": fields }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, src = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "src"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ "src": src }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.ScriptTag = ScriptTag;
    ScriptTag.apiVersion = types_1.ApiVersion.January24;
    ScriptTag.hasOne = {};
    ScriptTag.hasMany = {};
    ScriptTag.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "script_tags/<id>.json" },
      { "http_method": "get", "operation": "count", "ids": [], "path": "script_tags/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "script_tags.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "script_tags/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "script_tags.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "script_tags/<id>.json" }
    ];
    ScriptTag.resourceNames = [
      {
        "singular": "script_tag",
        "plural": "script_tags"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/shipping_zone.js
var require_shipping_zone = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/shipping_zone.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ShippingZone = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var country_1 = require_country();
    var province_1 = require_province();
    var ShippingZone = class extends base_1.Base {
      static all(_a) {
        var { session, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "fields": fields }, otherArgs)
          });
          return response;
        });
      }
    };
    exports.ShippingZone = ShippingZone;
    ShippingZone.apiVersion = types_1.ApiVersion.January24;
    ShippingZone.hasOne = {};
    ShippingZone.hasMany = {
      "countries": country_1.Country,
      "provinces": province_1.Province
    };
    ShippingZone.paths = [
      { "http_method": "get", "operation": "get", "ids": [], "path": "shipping_zones.json" }
    ];
    ShippingZone.resourceNames = [
      {
        "singular": "shipping_zone",
        "plural": "shipping_zones"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/shop.js
var require_shop = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/shop.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Shop = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Shop = class extends base_1.Base {
      static all(_a) {
        var { session, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "fields": fields }, otherArgs)
          });
          return response;
        });
      }
    };
    exports.Shop = Shop;
    Shop.apiVersion = types_1.ApiVersion.January24;
    Shop.hasOne = {};
    Shop.hasMany = {};
    Shop.paths = [
      { "http_method": "get", "operation": "get", "ids": [], "path": "shop.json" }
    ];
    Shop.resourceNames = [
      {
        "singular": "shop",
        "plural": "shops"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/smart_collection.js
var require_smart_collection = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/smart_collection.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SmartCollection = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var SmartCollection = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, limit = null, ids = null, since_id = null, title = null, product_id = null, handle = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "ids", "since_id", "title", "product_id", "handle", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "limit": limit, "ids": ids, "since_id": since_id, "title": title, "product_id": product_id, "handle": handle, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status, "fields": fields }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, title = null, product_id = null, updated_at_min = null, updated_at_max = null, published_at_min = null, published_at_max = null, published_status = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "title", "product_id", "updated_at_min", "updated_at_max", "published_at_min", "published_at_max", "published_status"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ "title": title, "product_id": product_id, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max, "published_at_min": published_at_min, "published_at_max": published_at_max, "published_status": published_status }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
      order(_a) {
        var { products = null, sort_order = null, body = null } = _a, otherArgs = tslib_1.__rest(_a, ["products", "sort_order", "body"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "put",
            operation: "order",
            session: this.session,
            urlIds: { "id": this.id },
            params: Object.assign({ "products": products, "sort_order": sort_order }, otherArgs),
            body,
            entity: this
          });
          return response ? response.body : null;
        });
      }
    };
    exports.SmartCollection = SmartCollection;
    SmartCollection.apiVersion = types_1.ApiVersion.January24;
    SmartCollection.hasOne = {};
    SmartCollection.hasMany = {};
    SmartCollection.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "smart_collections/<id>.json" },
      { "http_method": "get", "operation": "count", "ids": [], "path": "smart_collections/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "smart_collections.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "smart_collections/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "smart_collections.json" },
      { "http_method": "put", "operation": "order", "ids": ["id"], "path": "smart_collections/<id>/order.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "smart_collections/<id>.json" }
    ];
    SmartCollection.resourceNames = [
      {
        "singular": "smart_collection",
        "plural": "smart_collections"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/storefront_access_token.js
var require_storefront_access_token = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/storefront_access_token.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.StorefrontAccessToken = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var StorefrontAccessToken = class extends base_1.Base {
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs)
          });
          return response;
        });
      }
    };
    exports.StorefrontAccessToken = StorefrontAccessToken;
    StorefrontAccessToken.apiVersion = types_1.ApiVersion.January24;
    StorefrontAccessToken.hasOne = {};
    StorefrontAccessToken.hasMany = {};
    StorefrontAccessToken.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "storefront_access_tokens/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "storefront_access_tokens.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "storefront_access_tokens.json" }
    ];
    StorefrontAccessToken.resourceNames = [
      {
        "singular": "storefront_access_token",
        "plural": "storefront_access_tokens"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/tender_transaction.js
var require_tender_transaction = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/tender_transaction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TenderTransaction = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var TenderTransaction = class extends base_1.Base {
      static all(_a) {
        var { session, limit = null, since_id = null, processed_at_min = null, processed_at_max = null, processed_at = null, order = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "since_id", "processed_at_min", "processed_at_max", "processed_at", "order"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "limit": limit, "since_id": since_id, "processed_at_min": processed_at_min, "processed_at_max": processed_at_max, "processed_at": processed_at, "order": order }, otherArgs)
          });
          return response;
        });
      }
    };
    exports.TenderTransaction = TenderTransaction;
    TenderTransaction.apiVersion = types_1.ApiVersion.January24;
    TenderTransaction.hasOne = {};
    TenderTransaction.hasMany = {};
    TenderTransaction.paths = [
      { "http_method": "get", "operation": "get", "ids": [], "path": "tender_transactions.json" }
    ];
    TenderTransaction.resourceNames = [
      {
        "singular": "tender_transaction",
        "plural": "tender_transactions"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/theme.js
var require_theme = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/theme.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Theme = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Theme = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "fields": fields }, otherArgs)
          });
          return response;
        });
      }
    };
    exports.Theme = Theme;
    Theme.apiVersion = types_1.ApiVersion.January24;
    Theme.hasOne = {};
    Theme.hasMany = {};
    Theme.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "themes/<id>.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "themes.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "themes/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "themes.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "themes/<id>.json" }
    ];
    Theme.resourceNames = [
      {
        "singular": "theme",
        "plural": "themes"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/usage_charge.js
var require_usage_charge = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/usage_charge.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.UsageCharge = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var currency_1 = require_currency();
    var UsageCharge = class extends base_1.Base {
      static find({ session, id, recurring_application_charge_id = null, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id, "recurring_application_charge_id": recurring_application_charge_id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, recurring_application_charge_id = null, fields = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "recurring_application_charge_id", "fields"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: { "recurring_application_charge_id": recurring_application_charge_id },
            params: Object.assign({ "fields": fields }, otherArgs)
          });
          return response;
        });
      }
    };
    exports.UsageCharge = UsageCharge;
    UsageCharge.apiVersion = types_1.ApiVersion.January24;
    UsageCharge.hasOne = {
      "currency": currency_1.Currency
    };
    UsageCharge.hasMany = {};
    UsageCharge.paths = [
      { "http_method": "get", "operation": "get", "ids": ["recurring_application_charge_id"], "path": "recurring_application_charges/<recurring_application_charge_id>/usage_charges.json" },
      { "http_method": "get", "operation": "get", "ids": ["recurring_application_charge_id", "id"], "path": "recurring_application_charges/<recurring_application_charge_id>/usage_charges/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": ["recurring_application_charge_id"], "path": "recurring_application_charges/<recurring_application_charge_id>/usage_charges.json" }
    ];
    UsageCharge.resourceNames = [
      {
        "singular": "usage_charge",
        "plural": "usage_charges"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/user.js
var require_user = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/user.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.User = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var User = class extends base_1.Base {
      static find({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: {}
          });
          return result.data ? result.data[0] : null;
        });
      }
      static all(_a) {
        var { session, limit = null, page_info = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "limit", "page_info"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "limit": limit, "page_info": page_info }, otherArgs)
          });
          return response;
        });
      }
      static current(_a) {
        var { session } = _a, otherArgs = tslib_1.__rest(_a, ["session"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "current",
            session,
            urlIds: {},
            params: Object.assign({}, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.User = User;
    User.apiVersion = types_1.ApiVersion.January24;
    User.hasOne = {};
    User.hasMany = {};
    User.paths = [
      { "http_method": "get", "operation": "current", "ids": [], "path": "users/current.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "users.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "users/<id>.json" }
    ];
    User.resourceNames = [
      {
        "singular": "user",
        "plural": "users"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/webhook.js
var require_webhook = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/webhook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Webhook = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var base_1 = require_base();
    var types_1 = require_types();
    var Webhook = class extends base_1.Base {
      static find({ session, id, fields = null }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const result = yield this.baseFind({
            session,
            urlIds: { "id": id },
            params: { "fields": fields }
          });
          return result.data ? result.data[0] : null;
        });
      }
      static delete({ session, id }) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "delete",
            operation: "delete",
            session,
            urlIds: { "id": id },
            params: {}
          });
          return response ? response.body : null;
        });
      }
      static all(_a) {
        var { session, address = null, created_at_max = null, created_at_min = null, fields = null, limit = null, since_id = null, topic = null, updated_at_min = null, updated_at_max = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "address", "created_at_max", "created_at_min", "fields", "limit", "since_id", "topic", "updated_at_min", "updated_at_max"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.baseFind({
            session,
            urlIds: {},
            params: Object.assign({ "address": address, "created_at_max": created_at_max, "created_at_min": created_at_min, "fields": fields, "limit": limit, "since_id": since_id, "topic": topic, "updated_at_min": updated_at_min, "updated_at_max": updated_at_max }, otherArgs)
          });
          return response;
        });
      }
      static count(_a) {
        var { session, address = null, topic = null } = _a, otherArgs = tslib_1.__rest(_a, ["session", "address", "topic"]);
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
          const response = yield this.request({
            http_method: "get",
            operation: "count",
            session,
            urlIds: {},
            params: Object.assign({ "address": address, "topic": topic }, otherArgs),
            body: {},
            entity: null
          });
          return response ? response.body : null;
        });
      }
    };
    exports.Webhook = Webhook;
    Webhook.apiVersion = types_1.ApiVersion.January24;
    Webhook.hasOne = {};
    Webhook.hasMany = {};
    Webhook.paths = [
      { "http_method": "delete", "operation": "delete", "ids": ["id"], "path": "webhooks/<id>.json" },
      { "http_method": "get", "operation": "count", "ids": [], "path": "webhooks/count.json" },
      { "http_method": "get", "operation": "get", "ids": [], "path": "webhooks.json" },
      { "http_method": "get", "operation": "get", "ids": ["id"], "path": "webhooks/<id>.json" },
      { "http_method": "post", "operation": "post", "ids": [], "path": "webhooks.json" },
      { "http_method": "put", "operation": "put", "ids": ["id"], "path": "webhooks/<id>.json" }
    ];
    Webhook.resourceNames = [
      {
        "singular": "webhook",
        "plural": "webhooks"
      }
    ];
  }
});

// node_modules/@shopify/shopify-api/rest/admin/2024-01/index.js
var require__ = __commonJS({
  "node_modules/@shopify/shopify-api/rest/admin/2024-01/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.restResources = void 0;
    var abandoned_checkout_1 = require_abandoned_checkout();
    var access_scope_1 = require_access_scope();
    var apple_pay_certificate_1 = require_apple_pay_certificate();
    var application_charge_1 = require_application_charge();
    var application_credit_1 = require_application_credit();
    var article_1 = require_article();
    var asset_1 = require_asset();
    var assigned_fulfillment_order_1 = require_assigned_fulfillment_order();
    var balance_1 = require_balance();
    var blog_1 = require_blog();
    var cancellation_request_1 = require_cancellation_request();
    var carrier_service_1 = require_carrier_service();
    var checkout_1 = require_checkout();
    var collect_1 = require_collect();
    var collection_1 = require_collection();
    var collection_listing_1 = require_collection_listing();
    var comment_1 = require_comment();
    var country_1 = require_country();
    var currency_1 = require_currency();
    var custom_collection_1 = require_custom_collection();
    var customer_1 = require_customer();
    var customer_address_1 = require_customer_address();
    var deprecated_api_call_1 = require_deprecated_api_call();
    var discount_code_1 = require_discount_code();
    var dispute_1 = require_dispute();
    var dispute_evidence_1 = require_dispute_evidence();
    var dispute_file_upload_1 = require_dispute_file_upload();
    var draft_order_1 = require_draft_order();
    var event_1 = require_event();
    var fulfillment_1 = require_fulfillment();
    var fulfillment_event_1 = require_fulfillment_event();
    var fulfillment_order_1 = require_fulfillment_order();
    var fulfillment_request_1 = require_fulfillment_request();
    var fulfillment_service_1 = require_fulfillment_service();
    var gift_card_1 = require_gift_card();
    var gift_card_adjustment_1 = require_gift_card_adjustment();
    var image_1 = require_image();
    var inventory_item_1 = require_inventory_item();
    var inventory_level_1 = require_inventory_level();
    var location_1 = require_location();
    var locations_for_move_1 = require_locations_for_move();
    var marketing_event_1 = require_marketing_event();
    var metafield_1 = require_metafield();
    var mobile_platform_application_1 = require_mobile_platform_application();
    var order_1 = require_order();
    var order_risk_1 = require_order_risk();
    var page_1 = require_page();
    var payment_1 = require_payment();
    var payment_gateway_1 = require_payment_gateway();
    var payment_transaction_1 = require_payment_transaction();
    var payout_1 = require_payout();
    var policy_1 = require_policy();
    var price_rule_1 = require_price_rule();
    var product_1 = require_product();
    var product_listing_1 = require_product_listing();
    var product_resource_feedback_1 = require_product_resource_feedback();
    var province_1 = require_province();
    var recurring_application_charge_1 = require_recurring_application_charge();
    var redirect_1 = require_redirect();
    var refund_1 = require_refund();
    var report_1 = require_report();
    var resource_feedback_1 = require_resource_feedback();
    var script_tag_1 = require_script_tag();
    var shipping_zone_1 = require_shipping_zone();
    var shop_1 = require_shop();
    var smart_collection_1 = require_smart_collection();
    var storefront_access_token_1 = require_storefront_access_token();
    var tender_transaction_1 = require_tender_transaction();
    var theme_1 = require_theme();
    var transaction_1 = require_transaction();
    var usage_charge_1 = require_usage_charge();
    var user_1 = require_user();
    var variant_1 = require_variant();
    var webhook_1 = require_webhook();
    exports.restResources = {
      AbandonedCheckout: abandoned_checkout_1.AbandonedCheckout,
      AccessScope: access_scope_1.AccessScope,
      ApplePayCertificate: apple_pay_certificate_1.ApplePayCertificate,
      ApplicationCharge: application_charge_1.ApplicationCharge,
      ApplicationCredit: application_credit_1.ApplicationCredit,
      Article: article_1.Article,
      Asset: asset_1.Asset,
      AssignedFulfillmentOrder: assigned_fulfillment_order_1.AssignedFulfillmentOrder,
      Balance: balance_1.Balance,
      Blog: blog_1.Blog,
      CancellationRequest: cancellation_request_1.CancellationRequest,
      CarrierService: carrier_service_1.CarrierService,
      Checkout: checkout_1.Checkout,
      Collect: collect_1.Collect,
      Collection: collection_1.Collection,
      CollectionListing: collection_listing_1.CollectionListing,
      Comment: comment_1.Comment,
      Country: country_1.Country,
      Currency: currency_1.Currency,
      CustomCollection: custom_collection_1.CustomCollection,
      Customer: customer_1.Customer,
      CustomerAddress: customer_address_1.CustomerAddress,
      DeprecatedApiCall: deprecated_api_call_1.DeprecatedApiCall,
      DiscountCode: discount_code_1.DiscountCode,
      Dispute: dispute_1.Dispute,
      DisputeEvidence: dispute_evidence_1.DisputeEvidence,
      DisputeFileUpload: dispute_file_upload_1.DisputeFileUpload,
      DraftOrder: draft_order_1.DraftOrder,
      Event: event_1.Event,
      Fulfillment: fulfillment_1.Fulfillment,
      FulfillmentEvent: fulfillment_event_1.FulfillmentEvent,
      FulfillmentOrder: fulfillment_order_1.FulfillmentOrder,
      FulfillmentRequest: fulfillment_request_1.FulfillmentRequest,
      FulfillmentService: fulfillment_service_1.FulfillmentService,
      GiftCard: gift_card_1.GiftCard,
      GiftCardAdjustment: gift_card_adjustment_1.GiftCardAdjustment,
      Image: image_1.Image,
      InventoryItem: inventory_item_1.InventoryItem,
      InventoryLevel: inventory_level_1.InventoryLevel,
      Location: location_1.Location,
      LocationsForMove: locations_for_move_1.LocationsForMove,
      MarketingEvent: marketing_event_1.MarketingEvent,
      Metafield: metafield_1.Metafield,
      MobilePlatformApplication: mobile_platform_application_1.MobilePlatformApplication,
      Order: order_1.Order,
      OrderRisk: order_risk_1.OrderRisk,
      Page: page_1.Page,
      Payment: payment_1.Payment,
      PaymentGateway: payment_gateway_1.PaymentGateway,
      PaymentTransaction: payment_transaction_1.PaymentTransaction,
      Payout: payout_1.Payout,
      Policy: policy_1.Policy,
      PriceRule: price_rule_1.PriceRule,
      Product: product_1.Product,
      ProductListing: product_listing_1.ProductListing,
      ProductResourceFeedback: product_resource_feedback_1.ProductResourceFeedback,
      Province: province_1.Province,
      RecurringApplicationCharge: recurring_application_charge_1.RecurringApplicationCharge,
      Redirect: redirect_1.Redirect,
      Refund: refund_1.Refund,
      Report: report_1.Report,
      ResourceFeedback: resource_feedback_1.ResourceFeedback,
      ScriptTag: script_tag_1.ScriptTag,
      ShippingZone: shipping_zone_1.ShippingZone,
      Shop: shop_1.Shop,
      SmartCollection: smart_collection_1.SmartCollection,
      StorefrontAccessToken: storefront_access_token_1.StorefrontAccessToken,
      TenderTransaction: tender_transaction_1.TenderTransaction,
      Theme: theme_1.Theme,
      Transaction: transaction_1.Transaction,
      UsageCharge: usage_charge_1.UsageCharge,
      User: user_1.User,
      Variant: variant_1.Variant,
      Webhook: webhook_1.Webhook
    };
  }
});
export default require__();
//# sourceMappingURL=@shopify_shopify-api_rest_admin_2024-01.js.map
