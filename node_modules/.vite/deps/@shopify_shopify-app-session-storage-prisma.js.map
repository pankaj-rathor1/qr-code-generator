{
  "version": 3,
  "sources": ["../../@shopify/shopify-app-session-storage-prisma/build/cjs/prisma.js"],
  "sourcesContent": ["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar shopifyApi = require('@shopify/shopify-api');\n\nclass PrismaSessionStorage {\n  constructor(prisma, {\n    tableName\n  } = {}) {\n    this.prisma = prisma;\n    this.ready = void 0;\n    this.tableName = 'session';\n    if (tableName) {\n      this.tableName = tableName;\n    }\n    if (this.getSessionTable() === undefined) {\n      throw new Error(`PrismaClient does not have a ${this.tableName} table`);\n    }\n    this.ready = this.getSessionTable().count().catch(cause => {\n      throw new MissingSessionTableError(`Prisma ${this.tableName} table does not exist. This could happen for a few reasons, see https://github.com/Shopify/shopify-app-js/tree/main/packages/shopify-app-session-storage-prisma#troubleshooting for more information`, {\n        cause\n      });\n    });\n  }\n  async storeSession(session) {\n    await this.ready;\n    const data = this.sessionToRow(session);\n    await this.getSessionTable().upsert({\n      where: {\n        id: session.id\n      },\n      update: data,\n      create: data\n    });\n    return true;\n  }\n  async loadSession(id) {\n    await this.ready;\n    const row = await this.getSessionTable().findUnique({\n      where: {\n        id\n      }\n    });\n    if (!row) {\n      return undefined;\n    }\n    return this.rowToSession(row);\n  }\n  async deleteSession(id) {\n    await this.ready;\n    try {\n      await this.getSessionTable().delete({\n        where: {\n          id\n        }\n      });\n    } catch {\n      return true;\n    }\n    return true;\n  }\n  async deleteSessions(ids) {\n    await this.ready;\n    await this.getSessionTable().deleteMany({\n      where: {\n        id: {\n          in: ids\n        }\n      }\n    });\n    return true;\n  }\n  async findSessionsByShop(shop) {\n    await this.ready;\n    const sessions = await this.getSessionTable().findMany({\n      where: {\n        shop\n      },\n      take: 25,\n      orderBy: [{\n        expires: 'desc'\n      }]\n    });\n    return sessions.map(session => this.rowToSession(session));\n  }\n  sessionToRow(session) {\n    var _sessionParams$online;\n    const sessionParams = session.toObject();\n    return {\n      id: session.id,\n      shop: session.shop,\n      state: session.state,\n      isOnline: session.isOnline,\n      scope: session.scope || null,\n      expires: session.expires || null,\n      accessToken: session.accessToken || '',\n      userId: ((_sessionParams$online = sessionParams.onlineAccessInfo) === null || _sessionParams$online === void 0 ? void 0 : _sessionParams$online.associated_user.id) || null\n    };\n  }\n  rowToSession(row) {\n    const sessionParams = {\n      id: row.id,\n      shop: row.shop,\n      state: row.state,\n      isOnline: row.isOnline\n    };\n    if (row.expires) {\n      sessionParams.expires = row.expires.getTime();\n    }\n    if (row.scope) {\n      sessionParams.scope = row.scope;\n    }\n    if (row.accessToken) {\n      sessionParams.accessToken = row.accessToken;\n    }\n    if (row.userId) {\n      sessionParams.onlineAccessInfo = String(row.userId);\n    }\n    return shopifyApi.Session.fromPropertyArray(Object.entries(sessionParams));\n  }\n  getSessionTable() {\n    return this.prisma[this.tableName];\n  }\n}\nclass MissingSessionTableError extends Error {}\n\nexports.MissingSessionTableError = MissingSessionTableError;\nexports.PrismaSessionStorage = PrismaSessionStorage;\n"],
  "mappings": "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",
  "names": []
}
