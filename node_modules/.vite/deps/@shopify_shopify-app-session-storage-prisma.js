import {
  require_lib
} from "./chunk-IS3H2M7T.js";
import "./chunk-7DNGBRSA.js";
import "./chunk-QFE7ZBXI.js";
import {
  __commonJS
} from "./chunk-WXXH56N5.js";

// node_modules/@shopify/shopify-app-session-storage-prisma/build/cjs/prisma.js
var require_prisma = __commonJS({
  "node_modules/@shopify/shopify-app-session-storage-prisma/build/cjs/prisma.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    var shopifyApi = require_lib();
    var PrismaSessionStorage = class {
      constructor(prisma, {
        tableName
      } = {}) {
        this.prisma = prisma;
        this.ready = void 0;
        this.tableName = "session";
        if (tableName) {
          this.tableName = tableName;
        }
        if (this.getSessionTable() === void 0) {
          throw new Error(`PrismaClient does not have a ${this.tableName} table`);
        }
        this.ready = this.getSessionTable().count().catch((cause) => {
          throw new MissingSessionTableError(`Prisma ${this.tableName} table does not exist. This could happen for a few reasons, see https://github.com/Shopify/shopify-app-js/tree/main/packages/shopify-app-session-storage-prisma#troubleshooting for more information`, {
            cause
          });
        });
      }
      async storeSession(session) {
        await this.ready;
        const data = this.sessionToRow(session);
        await this.getSessionTable().upsert({
          where: {
            id: session.id
          },
          update: data,
          create: data
        });
        return true;
      }
      async loadSession(id) {
        await this.ready;
        const row = await this.getSessionTable().findUnique({
          where: {
            id
          }
        });
        if (!row) {
          return void 0;
        }
        return this.rowToSession(row);
      }
      async deleteSession(id) {
        await this.ready;
        try {
          await this.getSessionTable().delete({
            where: {
              id
            }
          });
        } catch {
          return true;
        }
        return true;
      }
      async deleteSessions(ids) {
        await this.ready;
        await this.getSessionTable().deleteMany({
          where: {
            id: {
              in: ids
            }
          }
        });
        return true;
      }
      async findSessionsByShop(shop) {
        await this.ready;
        const sessions = await this.getSessionTable().findMany({
          where: {
            shop
          },
          take: 25,
          orderBy: [{
            expires: "desc"
          }]
        });
        return sessions.map((session) => this.rowToSession(session));
      }
      sessionToRow(session) {
        var _sessionParams$online;
        const sessionParams = session.toObject();
        return {
          id: session.id,
          shop: session.shop,
          state: session.state,
          isOnline: session.isOnline,
          scope: session.scope || null,
          expires: session.expires || null,
          accessToken: session.accessToken || "",
          userId: ((_sessionParams$online = sessionParams.onlineAccessInfo) === null || _sessionParams$online === void 0 ? void 0 : _sessionParams$online.associated_user.id) || null
        };
      }
      rowToSession(row) {
        const sessionParams = {
          id: row.id,
          shop: row.shop,
          state: row.state,
          isOnline: row.isOnline
        };
        if (row.expires) {
          sessionParams.expires = row.expires.getTime();
        }
        if (row.scope) {
          sessionParams.scope = row.scope;
        }
        if (row.accessToken) {
          sessionParams.accessToken = row.accessToken;
        }
        if (row.userId) {
          sessionParams.onlineAccessInfo = String(row.userId);
        }
        return shopifyApi.Session.fromPropertyArray(Object.entries(sessionParams));
      }
      getSessionTable() {
        return this.prisma[this.tableName];
      }
    };
    var MissingSessionTableError = class extends Error {
    };
    exports.MissingSessionTableError = MissingSessionTableError;
    exports.PrismaSessionStorage = PrismaSessionStorage;
  }
});
export default require_prisma();
//# sourceMappingURL=@shopify_shopify-app-session-storage-prisma.js.map
