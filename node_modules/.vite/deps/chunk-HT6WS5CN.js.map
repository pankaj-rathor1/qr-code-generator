{
  "version": 3,
  "sources": ["../../@shopify/shopify-app-remix/node_modules/isbot/src/amend/index.js", "../../@shopify/shopify-app-remix/node_modules/isbot/src/isbot/index.js", "../../@shopify/shopify-app-remix/node_modules/isbot/src/index.js", "../../@shopify/shopify-app-remix/build/cjs/server/authenticate/const.js", "../../@shopify/shopify-app-remix/build/cjs/server/authenticate/helpers/app-bridge-url.js"],
  "sourcesContent": ["/**\n * Mutate given list of patter strings\n * @param {string[]} list\n * @returns {string[]}\n */\nexport function amend (list) {\n  try {\n    // Risk: Uses lookbehind assertion, avoid breakage in parsing by using RegExp constructor\n    new RegExp('(?<! cu)bot').test('dangerbot') // eslint-disable-line prefer-regex-literals\n  } catch (error) {\n    // Skip regex fixes\n    return list\n  }\n\n  [\n    // Addresses: Cubot device\n    ['bot', '(?<! cu)bot'],\n    // Addresses: Android webview\n    ['google', '(?<! (?:channel/|google/))google(?!(app|/google| pixel))'],\n    // Addresses: libhttp browser\n    ['http', '(?<!(?:lib))http'],\n    // Addresses: java based browsers\n    ['java', 'java(?!;)'],\n    // Addresses: Yandex Search App\n    ['search', '(?<! ya(?:yandex)?)search']\n  ].forEach(\n    ([search, replace]) => {\n      const index = list.lastIndexOf(search)\n      if (~index) {\n        list.splice(index, 1, replace)\n      }\n    }\n  )\n\n  return list\n}\n", "import list from '../list.json' assert { type: 'json' }\nimport { amend } from '../amend/index.js'\n\namend(list)\n\nconst flags = 'i'\n\n/**\n * Test user agents for matching patterns\n */\nexport class Isbot {\n  /**\n   * @type {string[]}\n   */\n  #list\n\n  /**\n   * @type {RegExp}\n   */\n  #pattern\n\n  constructor (patterns) {\n    this.#list = patterns || list.slice()\n    this.#update()\n\n    const isbot = ua => this.test(ua)\n\n    return Object.defineProperties(\n      isbot,\n      Object.entries(Object.getOwnPropertyDescriptors(Isbot.prototype)).reduce(\n        (accumulator, [prop, descriptor]) => {\n          if (typeof descriptor.value === 'function') {\n            Object.assign(\n              accumulator,\n              { [prop]: { value: this[prop].bind(this) } }\n            )\n          }\n          if (typeof descriptor.get === 'function') {\n            Object.assign(\n              accumulator,\n              { [prop]: { get: () => this[prop] } }\n            )\n          }\n          return accumulator\n        },\n        {}\n      )\n    )\n  }\n\n  /**\n   * Recreate the pattern from rules list\n   */\n  #update () {\n    this.#pattern = new RegExp(\n      this.#list.join('|'),\n      flags\n    )\n  }\n\n  /**\n   * Find the first index of an existing rule or -1 if not found\n   * @param  {string} rule\n   * @returns {number}\n   */\n  #index (rule) {\n    return this.#list.indexOf(rule.toLowerCase())\n  }\n\n  /**\n   * Get a clone of the pattern\n   * @type RegExp\n   */\n  get pattern () {\n    return new RegExp(this.#pattern)\n  }\n\n  /**\n   * Match given string against out pattern\n   * @param  {string} ua User Agent string\n   * @returns {boolean}\n   */\n  test (ua) {\n    return Boolean(ua) && this.#pattern.test(ua)\n  }\n\n  isbot (ua) {\n    return Boolean(ua) && this.#pattern.test(ua)\n  }\n\n  /**\n   * Get the match for strings' known crawler pattern\n   * @param  {string} ua User Agent string\n   * @returns {string|null}\n   */\n  find (ua = '') {\n    const match = ua.match(this.#pattern)\n    return match && match[0]\n  }\n\n  /**\n   * Get the patterns that match user agent string if any\n   * @param  {string} ua User Agent string\n   * @returns {string[]}\n   */\n  matches (ua = '') {\n    return this.#list.filter(\n      entry => new RegExp(entry, flags).test(ua)\n    )\n  }\n\n  /**\n   * Clear all patterns that match user agent\n   * @param  {string} ua User Agent string\n   * @returns {void}\n   */\n  clear (ua = '') {\n    this.exclude(this.matches(ua))\n  }\n\n  /**\n   * Extent patterns for known crawlers\n   * @param  {string[]} filters\n   * @returns {void}\n   */\n  extend (filters = []) {\n    [].push.apply(\n      this.#list,\n      filters.filter(\n        rule => this.#index(rule) === -1\n      ).map(\n        filter => filter.toLowerCase()\n      )\n    )\n    this.#update()\n  }\n\n  /**\n   * Exclude patterns from bot pattern rule\n   * @param  {string[]} filters\n   * @returns {void}\n   */\n  exclude (filters = []) {\n    let { length } = filters\n    while (length--) {\n      const index = this.#index(filters[length])\n      if (index > -1) {\n        this.#list.splice(index, 1)\n      }\n    }\n    this.#update()\n  }\n\n  /**\n   * Create a new Isbot instance using given list or self's list\n   * @param  {string[]} [list]\n   * @returns {Isbot}\n   */\n  spawn (list) {\n    return new Isbot(list || this.#list)\n  }\n}\n", "import { Isbot } from './isbot/index.js'\n\nconst isbot = new Isbot()\n\nexport default isbot\n", "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nconst APP_BRIDGE_URL = 'https://cdn.shopify.com/shopifycloud/app-bridge.js';\nconst REAUTH_URL_HEADER = 'X-Shopify-API-Request-Failure-Reauthorize-Url';\nconst RETRY_INVALID_SESSION_HEADER = {\n  'X-Shopify-Retry-Invalid-Session-Request': '1'\n};\n\nexports.APP_BRIDGE_URL = APP_BRIDGE_URL;\nexports.REAUTH_URL_HEADER = REAUTH_URL_HEADER;\nexports.RETRY_INVALID_SESSION_HEADER = RETRY_INVALID_SESSION_HEADER;\n", "'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar _const = require('../const.js');\n\nlet appBridgeUrlOverride;\nfunction setAppBridgeUrlOverride(url) {\n  appBridgeUrlOverride = url;\n}\nfunction appBridgeUrl() {\n  return appBridgeUrlOverride || _const.APP_BRIDGE_URL;\n}\n\nexports.appBridgeUrl = appBridgeUrl;\nexports.setAppBridgeUrlOverride = setAppBridgeUrlOverride;\n"],
  "mappings": "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",
  "names": ["amend", "list", "RegExp", "test", "error", "forEach", "_ref", "_ref2", "_slicedToArray", "search", "replace", "index", "lastIndexOf", "splice", "flags", "_list", "WeakMap", "_pattern", "_update", "WeakSet", "_index", "Isbot", "patterns", "_this", "_classCallCheck", "_classPrivateMethodInitSpec", "_classPrivateFieldInitSpec", "writable", "value", "_classPrivateFieldSet", "slice", "_classPrivateMethodGet", "_update2", "call", "isbot", "ua", "Object", "defineProperties", "entries", "getOwnPropertyDescriptors", "prototype", "reduce", "accumulator", "prop", "descriptor", "assign", "_defineProperty", "bind", "get", "_createClass", "key", "_classPrivateFieldGet", "Boolean", "find", "arguments", "length", "undefined", "match", "matches", "filter", "entry", "clear", "exclude", "extend", "_this2", "filters", "push", "apply", "rule", "_index2", "map", "toLowerCase", "spawn", "join", "indexOf"]
}
