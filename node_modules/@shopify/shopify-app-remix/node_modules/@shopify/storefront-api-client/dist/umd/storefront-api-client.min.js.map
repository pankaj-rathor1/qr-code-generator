{"version":3,"file":"storefront-api-client.min.js","sources":["../../../graphql-client/dist/graphql-client/constants.mjs","../../../graphql-client/dist/graphql-client/utilities.mjs","../../../graphql-client/dist/graphql-client/http-fetch.mjs","../../../graphql-client/dist/graphql-client/graphql-client.mjs","../../../graphql-client/dist/api-client-utilities/validations.mjs","../../../graphql-client/dist/api-client-utilities/api-versions.mjs","../../../src/constants.ts","../../../src/storefront-api-client.ts","../../../src/validations.ts","../../../graphql-client/dist/api-client-utilities/utilities.mjs"],"sourcesContent":["const CLIENT = \"GraphQL Client\";\nconst MIN_RETRIES = 0;\nconst MAX_RETRIES = 3;\nconst GQL_API_ERROR = \"An error occurred while fetching from the API. Review 'graphQLErrors' for details.\";\nconst UNEXPECTED_CONTENT_TYPE_ERROR = \"Response returned unexpected Content-Type:\";\nconst NO_DATA_OR_ERRORS_ERROR = \"An unknown error has occurred. The API did not return a data object or any errors in its response.\";\nconst CONTENT_TYPES = {\n    json: \"application/json\",\n    multipart: \"multipart/mixed\",\n};\nconst RETRY_WAIT_TIME = 1000;\nconst RETRIABLE_STATUS_CODES = [429, 503];\n\nexport { CLIENT, CONTENT_TYPES, GQL_API_ERROR, MAX_RETRIES, MIN_RETRIES, NO_DATA_OR_ERRORS_ERROR, RETRIABLE_STATUS_CODES, RETRY_WAIT_TIME, UNEXPECTED_CONTENT_TYPE_ERROR };\n//# sourceMappingURL=constants.mjs.map\n","import { MIN_RETRIES, MAX_RETRIES, CLIENT } from './constants.mjs';\n\nfunction formatErrorMessage(message, client = CLIENT) {\n    return message.startsWith(`${client}`) ? message : `${client}: ${message}`;\n}\nfunction getErrorMessage(error) {\n    return error instanceof Error ? error.message : JSON.stringify(error);\n}\nfunction validateRetries({ client, retries, }) {\n    if (retries !== undefined &&\n        (typeof retries !== \"number\" ||\n            retries < MIN_RETRIES ||\n            retries > MAX_RETRIES)) {\n        throw new Error(`${client}: The provided \"retries\" value (${retries}) is invalid - it cannot be less than ${MIN_RETRIES} or greater than ${MAX_RETRIES}`);\n    }\n}\nfunction getKeyValueIfValid(key, value) {\n    return value &&\n        (typeof value !== \"object\" ||\n            Array.isArray(value) ||\n            (typeof value === \"object\" && Object.keys(value).length > 0))\n        ? { [key]: value }\n        : {};\n}\n\nexport { formatErrorMessage, getErrorMessage, getKeyValueIfValid, validateRetries };\n//# sourceMappingURL=utilities.mjs.map\n","import { CLIENT, RETRY_WAIT_TIME, RETRIABLE_STATUS_CODES } from './constants.mjs';\nimport { formatErrorMessage, getErrorMessage } from './utilities.mjs';\n\nfunction generateHttpFetch({ clientLogger, customFetchApi = fetch, client = CLIENT, defaultRetryWaitTime = RETRY_WAIT_TIME, retriableCodes = RETRIABLE_STATUS_CODES, }) {\n    const httpFetch = async (requestParams, count, maxRetries) => {\n        const nextCount = count + 1;\n        const maxTries = maxRetries + 1;\n        let response;\n        try {\n            response = await customFetchApi(...requestParams);\n            clientLogger({\n                type: \"HTTP-Response\",\n                content: {\n                    requestParams,\n                    response,\n                },\n            });\n            if (!response.ok &&\n                retriableCodes.includes(response.status) &&\n                nextCount <= maxTries) {\n                throw new Error();\n            }\n            return response;\n        }\n        catch (error) {\n            if (nextCount <= maxTries) {\n                const retryAfter = response?.headers.get(\"Retry-After\");\n                await sleep(retryAfter ? parseInt(retryAfter, 10) : defaultRetryWaitTime);\n                clientLogger({\n                    type: \"HTTP-Retry\",\n                    content: {\n                        requestParams,\n                        lastResponse: response,\n                        retryAttempt: count,\n                        maxRetries,\n                    },\n                });\n                return httpFetch(requestParams, nextCount, maxRetries);\n            }\n            throw new Error(formatErrorMessage(`${maxRetries > 0\n                ? `Attempted maximum number of ${maxRetries} network retries. Last message - `\n                : \"\"}${getErrorMessage(error)}`, client));\n        }\n    };\n    return httpFetch;\n}\nasync function sleep(waitTime) {\n    return new Promise((resolve) => setTimeout(resolve, waitTime));\n}\n\nexport { generateHttpFetch };\n//# sourceMappingURL=http-fetch.mjs.map\n","import { generateHttpFetch } from './http-fetch.mjs';\nimport { CLIENT, CONTENT_TYPES, UNEXPECTED_CONTENT_TYPE_ERROR, GQL_API_ERROR, NO_DATA_OR_ERRORS_ERROR, RETRY_WAIT_TIME } from './constants.mjs';\nimport { validateRetries, formatErrorMessage, getErrorMessage, getKeyValueIfValid } from './utilities.mjs';\n\nfunction createGraphQLClient({ headers, url, customFetchApi = fetch, retries = 0, logger, }) {\n    validateRetries({ client: CLIENT, retries });\n    const config = {\n        headers,\n        url,\n        retries,\n    };\n    const clientLogger = generateClientLogger(logger);\n    const httpFetch = generateHttpFetch({\n        customFetchApi,\n        clientLogger,\n        defaultRetryWaitTime: RETRY_WAIT_TIME,\n    });\n    const fetch = generateFetch(httpFetch, config);\n    const request = generateRequest(fetch);\n    return {\n        config,\n        fetch,\n        request,\n    };\n}\nfunction generateClientLogger(logger) {\n    return (logContent) => {\n        if (logger) {\n            logger(logContent);\n        }\n    };\n}\nasync function processJSONResponse(response) {\n    const { errors, data, extensions } = await response.json();\n    return {\n        ...getKeyValueIfValid(\"data\", data),\n        ...getKeyValueIfValid(\"extensions\", extensions),\n        ...(errors || !data\n            ? {\n                errors: {\n                    networkStatusCode: response.status,\n                    message: formatErrorMessage(errors ? GQL_API_ERROR : NO_DATA_OR_ERRORS_ERROR),\n                    ...getKeyValueIfValid(\"graphQLErrors\", errors),\n                    response,\n                },\n            }\n            : {}),\n    };\n}\nfunction generateFetch(httpFetch, { url, headers, retries }) {\n    return async (operation, options = {}) => {\n        const { variables, headers: overrideHeaders, url: overrideUrl, retries: overrideRetries, } = options;\n        const body = JSON.stringify({\n            query: operation,\n            variables,\n        });\n        validateRetries({ client: CLIENT, retries: overrideRetries });\n        const flatHeaders = Object.fromEntries(Object.entries({ ...headers, ...overrideHeaders }).map(([key, value]) => [\n            key,\n            Array.isArray(value) ? value.join(\", \") : value.toString(),\n        ]));\n        const fetchParams = [\n            overrideUrl ?? url,\n            {\n                method: \"POST\",\n                headers: flatHeaders,\n                body,\n            },\n        ];\n        return httpFetch(fetchParams, 1, overrideRetries ?? retries);\n    };\n}\nfunction generateRequest(fetch) {\n    return async (...props) => {\n        try {\n            const response = await fetch(...props);\n            const { status, statusText } = response;\n            const contentType = response.headers.get(\"content-type\") || \"\";\n            if (!response.ok) {\n                return {\n                    errors: {\n                        networkStatusCode: status,\n                        message: formatErrorMessage(statusText),\n                        response,\n                    },\n                };\n            }\n            if (!contentType.includes(CONTENT_TYPES.json)) {\n                return {\n                    errors: {\n                        networkStatusCode: status,\n                        message: formatErrorMessage(`${UNEXPECTED_CONTENT_TYPE_ERROR} ${contentType}`),\n                        response,\n                    },\n                };\n            }\n            return processJSONResponse(response);\n        }\n        catch (error) {\n            return {\n                errors: {\n                    message: getErrorMessage(error),\n                },\n            };\n        }\n    };\n}\n\nexport { createGraphQLClient, generateClientLogger };\n//# sourceMappingURL=graphql-client.mjs.map\n","function validateDomainAndGetStoreUrl({ client, storeDomain, }) {\n    try {\n        if (!storeDomain || typeof storeDomain !== \"string\") {\n            throw new Error();\n        }\n        const trimmedDomain = storeDomain.trim();\n        const protocolUrl = trimmedDomain.startsWith(\"http:\") || trimmedDomain.startsWith(\"https:\")\n            ? trimmedDomain\n            : `https://${trimmedDomain}`;\n        const url = new URL(protocolUrl);\n        url.protocol = \"https\";\n        return url.origin;\n    }\n    catch (_error) {\n        throw new Error(`${client}: a valid store domain (\"${storeDomain}\") must be provided`);\n    }\n}\nfunction validateApiVersion({ client, currentSupportedApiVersions, apiVersion, logger, }) {\n    const versionError = `${client}: the provided apiVersion (\"${apiVersion}\")`;\n    const supportedVersion = `Currently supported API versions: ${currentSupportedApiVersions.join(\", \")}`;\n    if (!apiVersion || typeof apiVersion !== \"string\") {\n        throw new Error(`${versionError} is invalid. ${supportedVersion}`);\n    }\n    const trimmedApiVersion = apiVersion.trim();\n    if (!currentSupportedApiVersions.includes(trimmedApiVersion)) {\n        if (logger) {\n            logger({\n                type: \"Unsupported_Api_Version\",\n                content: {\n                    apiVersion,\n                    supportedApiVersions: currentSupportedApiVersions,\n                },\n            });\n        }\n        else {\n            console.warn(`${versionError} is likely deprecated or not supported. ${supportedVersion}`);\n        }\n    }\n}\n\nexport { validateApiVersion, validateDomainAndGetStoreUrl };\n//# sourceMappingURL=validations.mjs.map\n","function getQuarterMonth(quarter) {\n    const month = quarter * 3 - 2;\n    return month === 10 ? month : `0${month}`;\n}\nfunction getPrevousVersion(year, quarter, nQuarter) {\n    const versionQuarter = quarter - nQuarter;\n    if (versionQuarter <= 0) {\n        return `${year - 1}-${getQuarterMonth(versionQuarter + 4)}`;\n    }\n    return `${year}-${getQuarterMonth(versionQuarter)}`;\n}\nfunction getCurrentApiVersion() {\n    const date = new Date();\n    const month = date.getUTCMonth();\n    const year = date.getUTCFullYear();\n    const quarter = Math.floor(month / 3 + 1);\n    return {\n        year,\n        quarter,\n        version: `${year}-${getQuarterMonth(quarter)}`,\n    };\n}\nfunction getCurrentSupportedApiVersions() {\n    const { year, quarter, version: currentVersion } = getCurrentApiVersion();\n    const nextVersion = quarter === 4\n        ? `${year + 1}-01`\n        : `${year}-${getQuarterMonth(quarter + 1)}`;\n    return [\n        getPrevousVersion(year, quarter, 3),\n        getPrevousVersion(year, quarter, 2),\n        getPrevousVersion(year, quarter, 1),\n        currentVersion,\n        nextVersion,\n        \"unstable\",\n    ];\n}\n\nexport { getCurrentApiVersion, getCurrentSupportedApiVersions };\n//# sourceMappingURL=api-versions.mjs.map\n",null,null,null,"function generateGetHeaders(config) {\n    return (customHeaders) => {\n        return { ...(customHeaders ?? {}), ...config.headers };\n    };\n}\nfunction generateGetGQLClientParams({ getHeaders, getApiUrl }) {\n    return (operation, options) => {\n        const props = [operation];\n        if (options && Object.keys(options).length > 0) {\n            const { variables, apiVersion: propApiVersion, headers, retries, } = options;\n            props.push({\n                ...(variables ? { variables } : {}),\n                ...(headers ? { headers: getHeaders(headers) } : {}),\n                ...(propApiVersion ? { url: getApiUrl(propApiVersion) } : {}),\n                ...(retries ? { retries } : {}),\n            });\n        }\n        return props;\n    };\n}\n\nexport { generateGetGQLClientParams, generateGetHeaders };\n//# sourceMappingURL=utilities.mjs.map\n"],"names":["CLIENT","MIN_RETRIES","MAX_RETRIES","GQL_API_ERROR","UNEXPECTED_CONTENT_TYPE_ERROR","NO_DATA_OR_ERRORS_ERROR","CONTENT_TYPES","json","multipart","RETRY_WAIT_TIME","RETRIABLE_STATUS_CODES","formatErrorMessage","message","client","startsWith","getErrorMessage","error","Error","JSON","stringify","validateRetries","retries","undefined","getKeyValueIfValid","key","value","Array","isArray","Object","keys","length","generateHttpFetch","clientLogger","customFetchApi","fetch","defaultRetryWaitTime","retriableCodes","httpFetch","async","requestParams","count","maxRetries","nextCount","maxTries","response","type","content","ok","includes","status","retryAfter","headers","get","waitTime","Promise","resolve","setTimeout","sleep","parseInt","lastResponse","retryAttempt","createGraphQLClient","url","logger","config","logContent","generateClientLogger","operation","options","variables","overrideHeaders","overrideUrl","overrideRetries","body","query","flatHeaders","fromEntries","entries","map","join","toString","method","generateFetch","request","props","statusText","contentType","errors","data","extensions","networkStatusCode","processJSONResponse","generateRequest","validateApiVersion","currentSupportedApiVersions","apiVersion","versionError","supportedVersion","trimmedApiVersion","trim","supportedApiVersions","console","warn","getQuarterMonth","quarter","month","getPrevousVersion","year","nQuarter","versionQuarter","getCurrentSupportedApiVersions","version","currentVersion","date","Date","getUTCMonth","getUTCFullYear","Math","floor","getCurrentApiVersion","nextVersion","DEFAULT_CONTENT_TYPE","storeDomain","publicAccessToken","privateAccessToken","clientName","storeUrl","trimmedDomain","protocolUrl","URL","protocol","origin","_error","validateDomainAndGetStoreUrl","baseApiVersionValidationParams","validateRequiredAccessTokens","window","validatePrivateAccessTokenUsage","apiUrlFormatter","defaultApiVersion","urlApiVersion","generateApiUrlFormatter","Accept","apiUrl","graphqlClient","getHeaders","customHeaders","generateGetHeaders","getApiUrl","propApiVersion","generateGetApiUrl","getGQLClientParams","push","generateGetGQLClientParams","freeze"],"mappings":"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"}