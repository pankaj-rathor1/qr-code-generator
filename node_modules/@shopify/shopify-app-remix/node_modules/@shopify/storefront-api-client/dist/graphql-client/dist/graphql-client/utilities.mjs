import { MIN_RETRIES, MAX_RETRIES, CLIENT } from './constants.mjs';

function formatErrorMessage(message, client = CLIENT) {
    return message.startsWith(`${client}`) ? message : `${client}: ${message}`;
}
function getErrorMessage(error) {
    return error instanceof Error ? error.message : JSON.stringify(error);
}
function validateRetries({ client, retries, }) {
    if (retries !== undefined &&
        (typeof retries !== "number" ||
            retries < MIN_RETRIES ||
            retries > MAX_RETRIES)) {
        throw new Error(`${client}: The provided "retries" value (${retries}) is invalid - it cannot be less than ${MIN_RETRIES} or greater than ${MAX_RETRIES}`);
    }
}
function getKeyValueIfValid(key, value) {
    return value &&
        (typeof value !== "object" ||
            Array.isArray(value) ||
            (typeof value === "object" && Object.keys(value).length > 0))
        ? { [key]: value }
        : {};
}

export { formatErrorMessage, getErrorMessage, getKeyValueIfValid, validateRetries };
//# sourceMappingURL=utilities.mjs.map
