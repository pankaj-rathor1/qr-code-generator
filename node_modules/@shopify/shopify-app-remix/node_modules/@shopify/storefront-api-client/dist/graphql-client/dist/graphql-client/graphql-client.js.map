{"version":3,"file":"graphql-client.js","sources":["../../../../../graphql-client/dist/graphql-client/graphql-client.mjs"],"sourcesContent":["import { generateHttpFetch } from './http-fetch.mjs';\nimport { CLIENT, CONTENT_TYPES, UNEXPECTED_CONTENT_TYPE_ERROR, GQL_API_ERROR, NO_DATA_OR_ERRORS_ERROR, RETRY_WAIT_TIME } from './constants.mjs';\nimport { validateRetries, formatErrorMessage, getErrorMessage, getKeyValueIfValid } from './utilities.mjs';\n\nfunction createGraphQLClient({ headers, url, customFetchApi = fetch, retries = 0, logger, }) {\n    validateRetries({ client: CLIENT, retries });\n    const config = {\n        headers,\n        url,\n        retries,\n    };\n    const clientLogger = generateClientLogger(logger);\n    const httpFetch = generateHttpFetch({\n        customFetchApi,\n        clientLogger,\n        defaultRetryWaitTime: RETRY_WAIT_TIME,\n    });\n    const fetch = generateFetch(httpFetch, config);\n    const request = generateRequest(fetch);\n    return {\n        config,\n        fetch,\n        request,\n    };\n}\nfunction generateClientLogger(logger) {\n    return (logContent) => {\n        if (logger) {\n            logger(logContent);\n        }\n    };\n}\nasync function processJSONResponse(response) {\n    const { errors, data, extensions } = await response.json();\n    return {\n        ...getKeyValueIfValid(\"data\", data),\n        ...getKeyValueIfValid(\"extensions\", extensions),\n        ...(errors || !data\n            ? {\n                errors: {\n                    networkStatusCode: response.status,\n                    message: formatErrorMessage(errors ? GQL_API_ERROR : NO_DATA_OR_ERRORS_ERROR),\n                    ...getKeyValueIfValid(\"graphQLErrors\", errors),\n                    response,\n                },\n            }\n            : {}),\n    };\n}\nfunction generateFetch(httpFetch, { url, headers, retries }) {\n    return async (operation, options = {}) => {\n        const { variables, headers: overrideHeaders, url: overrideUrl, retries: overrideRetries, } = options;\n        const body = JSON.stringify({\n            query: operation,\n            variables,\n        });\n        validateRetries({ client: CLIENT, retries: overrideRetries });\n        const flatHeaders = Object.fromEntries(Object.entries({ ...headers, ...overrideHeaders }).map(([key, value]) => [\n            key,\n            Array.isArray(value) ? value.join(\", \") : value.toString(),\n        ]));\n        const fetchParams = [\n            overrideUrl ?? url,\n            {\n                method: \"POST\",\n                headers: flatHeaders,\n                body,\n            },\n        ];\n        return httpFetch(fetchParams, 1, overrideRetries ?? retries);\n    };\n}\nfunction generateRequest(fetch) {\n    return async (...props) => {\n        try {\n            const response = await fetch(...props);\n            const { status, statusText } = response;\n            const contentType = response.headers.get(\"content-type\") || \"\";\n            if (!response.ok) {\n                return {\n                    errors: {\n                        networkStatusCode: status,\n                        message: formatErrorMessage(statusText),\n                        response,\n                    },\n                };\n            }\n            if (!contentType.includes(CONTENT_TYPES.json)) {\n                return {\n                    errors: {\n                        networkStatusCode: status,\n                        message: formatErrorMessage(`${UNEXPECTED_CONTENT_TYPE_ERROR} ${contentType}`),\n                        response,\n                    },\n                };\n            }\n            return processJSONResponse(response);\n        }\n        catch (error) {\n            return {\n                errors: {\n                    message: getErrorMessage(error),\n                },\n            };\n        }\n    };\n}\n\nexport { createGraphQLClient, generateClientLogger };\n//# sourceMappingURL=graphql-client.mjs.map\n"],"names":["validateRetries","CLIENT","httpFetch","generateHttpFetch","RETRY_WAIT_TIME","getKeyValueIfValid","formatErrorMessage","GQL_API_ERROR","NO_DATA_OR_ERRORS_ERROR","CONTENT_TYPES","UNEXPECTED_CONTENT_TYPE_ERROR","getErrorMessage"],"mappings":"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"}