/*! shopify/graphql-client@0.9.4 -- Copyright (c) 2023-present, Shopify Inc. -- license (MIT): https://github.com/Shopify/shopify-api-js/blob/main/LICENSE.md */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).ShopifyGraphQLClient={})}(this,(function(e){"use strict";const t="GraphQL Client",r=0,n=3,s="An error occurred while fetching from the API. Review 'graphQLErrors' for details.",o="Response returned unexpected Content-Type:",i="An unknown error has occurred. The API did not return a data object or any errors in its response.",a={json:"application/json",multipart:"multipart/mixed"},c=1e3,u=[429,503];function f(e,r=t){return e.startsWith(`${r}`)?e:`${r}: ${e}`}function d(e){return e instanceof Error?e.message:JSON.stringify(e)}function p({client:e,retries:t}){if(void 0!==t&&("number"!=typeof t||t<r||t>n))throw new Error(`${e}: The provided "retries" value (${t}) is invalid - it cannot be less than ${r} or greater than ${n}`)}function l(e,t){return t&&("object"!=typeof t||Array.isArray(t)||"object"==typeof t&&Object.keys(t).length>0)?{[e]:t}:{}}function h({clientLogger:e,customFetchApi:r=fetch,client:n=t,defaultRetryWaitTime:s=c,retriableCodes:o=u}){const i=async(t,a,c)=>{const u=a+1,p=c+1;let l;try{if(l=await r(...t),e({type:"HTTP-Response",content:{requestParams:t,response:l}}),!l.ok&&o.includes(l.status)&&u<=p)throw new Error;return l}catch(r){if(u<=p){const r=l?.headers.get("Retry-After");return await async function(e){return new Promise((t=>setTimeout(t,e)))}(r?parseInt(r,10):s),e({type:"HTTP-Retry",content:{requestParams:t,lastResponse:l,retryAttempt:a,maxRetries:c}}),i(t,u,c)}throw new Error(f(`${c>0?`Attempted maximum number of ${c} network retries. Last message - `:""}${d(r)}`,n))}};return i}e.createGraphQLClient=function({headers:e,url:r,customFetchApi:n=w,retries:u=0,logger:y}){p({client:t,retries:u});const m={headers:e,url:r,retries:u},g=function(e){return t=>{e&&e(t)}}(y),w=function(e,{url:r,headers:n,retries:s}){return async(o,i={})=>{const{variables:a,headers:c,url:u,retries:f}=i,d=JSON.stringify({query:o,variables:a});p({client:t,retries:f});const l=Object.fromEntries(Object.entries({...n,...c}).map((([e,t])=>[e,Array.isArray(t)?t.join(", "):t.toString()])));return e([u??r,{method:"POST",headers:l,body:d}],1,f??s)}}(h({customFetchApi:n,clientLogger:g,defaultRetryWaitTime:c}),m),b=function(e){return async(...t)=>{try{const r=await e(...t),{status:n,statusText:c}=r,u=r.headers.get("content-type")||"";return r.ok?u.includes(a.json)?async function(e){const{errors:t,data:r,extensions:n}=await e.json();return{...l("data",r),...l("extensions",n),...t||!r?{errors:{networkStatusCode:e.status,message:f(t?s:i),...l("graphQLErrors",t),response:e}}:{}}}(r):{errors:{networkStatusCode:n,message:f(`${o} ${u}`),response:r}}:{errors:{networkStatusCode:n,message:f(c),response:r}}}catch(e){return{errors:{message:d(e)}}}}}(w);return{config:m,fetch:w,request:b}}}));
//# sourceMappingURL=graphql-client.min.js.map
