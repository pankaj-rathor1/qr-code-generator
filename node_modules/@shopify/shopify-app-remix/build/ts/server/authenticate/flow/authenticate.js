"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authenticateFlowFactory = void 0;
var tslib_1 = require("tslib");
var admin_1 = require("../../clients/admin");
function authenticateFlowFactory(params) {
    var api = params.api, config = params.config, logger = params.logger;
    return function authenticate(request) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var rawBody, result, payload, sessionId, session;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        logger.info('Authenticating flow request');
                        if (request.method !== 'POST') {
                            logger.debug('Received a non-POST request for flow. Only POST requests are allowed.', { url: request.url, method: request.method });
                            throw new Response(undefined, {
                                status: 405,
                                statusText: 'Method not allowed',
                            });
                        }
                        return [4 /*yield*/, request.text()];
                    case 1:
                        rawBody = _a.sent();
                        return [4 /*yield*/, api.flow.validate({
                                rawBody: rawBody,
                                rawRequest: request,
                            })];
                    case 2:
                        result = _a.sent();
                        if (!result.valid) {
                            logger.error('Received an invalid flow request', { reason: result.reason });
                            throw new Response(undefined, {
                                status: 400,
                                statusText: 'Bad Request',
                            });
                        }
                        payload = JSON.parse(rawBody);
                        logger.debug('Flow request is valid, looking for an offline session', {
                            shop: payload.shopify_domain,
                        });
                        sessionId = api.session.getOfflineId(payload.shopify_domain);
                        return [4 /*yield*/, config.sessionStorage.loadSession(sessionId)];
                    case 3:
                        session = _a.sent();
                        if (!session) {
                            logger.info('Flow request could not find session', {
                                shop: payload.shopify_domain,
                            });
                            throw new Response(undefined, {
                                status: 400,
                                statusText: 'Bad Request',
                            });
                        }
                        logger.debug('Found a session for the flow request', { shop: session.shop });
                        return [2 /*return*/, {
                                session: session,
                                payload: payload,
                                admin: (0, admin_1.adminClientFactory)({ params: params, session: session }),
                            }];
                }
            });
        });
    };
}
exports.authenticateFlowFactory = authenticateFlowFactory;
//# sourceMappingURL=authenticate.js.map