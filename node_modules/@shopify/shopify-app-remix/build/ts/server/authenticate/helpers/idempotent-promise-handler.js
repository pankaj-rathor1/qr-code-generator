"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IdempotentPromiseHandler = void 0;
var tslib_1 = require("tslib");
var IDENTIFIER_TTL_MS = 60000;
var IdempotentPromiseHandler = /** @class */ (function () {
    function IdempotentPromiseHandler() {
        this.identifiers = new Map();
    }
    IdempotentPromiseHandler.prototype.handlePromise = function (_a) {
        var promiseFunction = _a.promiseFunction, identifier = _a.identifier;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, , 3, 4]);
                        if (!this.isPromiseRunnable(identifier)) return [3 /*break*/, 2];
                        return [4 /*yield*/, promiseFunction()];
                    case 1:
                        _b.sent();
                        _b.label = 2;
                    case 2: return [3 /*break*/, 4];
                    case 3:
                        this.clearStaleIdentifiers();
                        return [7 /*endfinally*/];
                    case 4: return [2 /*return*/, Promise.resolve()];
                }
            });
        });
    };
    IdempotentPromiseHandler.prototype.isPromiseRunnable = function (identifier) {
        if (!this.identifiers.has(identifier)) {
            this.identifiers.set(identifier, Date.now());
            return true;
        }
        return false;
    };
    IdempotentPromiseHandler.prototype.clearStaleIdentifiers = function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            return tslib_1.__generator(this, function (_a) {
                this.identifiers.forEach(function (date, identifier, map) {
                    if (Date.now() - date > IDENTIFIER_TTL_MS) {
                        map.delete(identifier);
                    }
                });
                return [2 /*return*/];
            });
        });
    };
    return IdempotentPromiseHandler;
}());
exports.IdempotentPromiseHandler = IdempotentPromiseHandler;
//# sourceMappingURL=idempotent-promise-handler.js.map