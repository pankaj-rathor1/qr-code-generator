"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TokenExchangeStrategy = void 0;
var tslib_1 = require("tslib");
var shopify_api_1 = require("@shopify/shopify-api");
var helpers_1 = require("../../helpers");
var helpers_2 = require("../helpers");
var TokenExchangeStrategy = /** @class */ (function () {
    function TokenExchangeStrategy(_a) {
        var api = _a.api, config = _a.config, logger = _a.logger;
        this.api = api;
        this.config = config;
        this.logger = logger;
    }
    TokenExchangeStrategy.prototype.respondToOAuthRequests = function (_request) {
        return tslib_1.__awaiter(this, void 0, void 0, function () { return tslib_1.__generator(this, function (_a) {
            return [2 /*return*/];
        }); });
    };
    TokenExchangeStrategy.prototype.authenticate = function (request, sessionContext) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, api, config, logger, shop, session, sessionToken, offlineSession, newSession, onlineSession, error_1;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this, api = _a.api, config = _a.config, logger = _a.logger;
                        shop = sessionContext.shop, session = sessionContext.session, sessionToken = sessionContext.sessionToken;
                        if (!sessionToken)
                            throw new shopify_api_1.InvalidJwtError();
                        if (!(!session || session.isExpired())) return [3 /*break*/, 9];
                        logger.info('No valid session found');
                        logger.info('Requesting offline access token');
                        return [4 /*yield*/, this.exchangeToken({
                                request: request,
                                sessionToken: sessionToken,
                                shop: shop,
                                requestedTokenType: shopify_api_1.RequestedTokenType.OfflineAccessToken,
                            })];
                    case 1:
                        offlineSession = (_b.sent()).session;
                        return [4 /*yield*/, config.sessionStorage.storeSession(offlineSession)];
                    case 2:
                        _b.sent();
                        newSession = offlineSession;
                        if (!config.useOnlineTokens) return [3 /*break*/, 5];
                        logger.info('Requesting online access token');
                        return [4 /*yield*/, this.exchangeToken({
                                request: request,
                                sessionToken: sessionToken,
                                shop: shop,
                                requestedTokenType: shopify_api_1.RequestedTokenType.OnlineAccessToken,
                            })];
                    case 3:
                        onlineSession = (_b.sent()).session;
                        return [4 /*yield*/, config.sessionStorage.storeSession(onlineSession)];
                    case 4:
                        _b.sent();
                        newSession = onlineSession;
                        _b.label = 5;
                    case 5:
                        _b.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this.handleAfterAuthHook({ api: api, config: config, logger: logger }, newSession, request, sessionToken)];
                    case 6:
                        _b.sent();
                        return [3 /*break*/, 8];
                    case 7:
                        error_1 = _b.sent();
                        throw new Response(undefined, {
                            status: 500,
                            statusText: 'Internal Server Error',
                        });
                    case 8: return [2 /*return*/, newSession];
                    case 9: return [2 /*return*/, session];
                }
            });
        });
    };
    TokenExchangeStrategy.prototype.handleClientError = function (request) {
        var _this = this;
        var _a = this, api = _a.api, config = _a.config, logger = _a.logger;
        return (0, helpers_2.handleClientErrorFactory)({
            request: request,
            onError: function (_a) {
                var session = _a.session, error = _a.error;
                return tslib_1.__awaiter(_this, void 0, void 0, function () {
                    return tslib_1.__generator(this, function (_b) {
                        if (error.response.code === 401) {
                            config.sessionStorage.deleteSession(session.id);
                            (0, helpers_1.respondToInvalidSessionToken)({
                                params: { config: config, api: api, logger: logger },
                                request: request,
                            });
                        }
                        return [2 /*return*/];
                    });
                });
            },
        });
    };
    TokenExchangeStrategy.prototype.exchangeToken = function (_a) {
        var _b;
        var request = _a.request, shop = _a.shop, sessionToken = _a.sessionToken, requestedTokenType = _a.requestedTokenType;
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _c, api, config, logger, error_2;
            return tslib_1.__generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _c = this, api = _c.api, config = _c.config, logger = _c.logger;
                        _d.label = 1;
                    case 1:
                        _d.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, api.auth.tokenExchange({
                                sessionToken: sessionToken,
                                shop: shop,
                                requestedTokenType: requestedTokenType,
                            })];
                    case 2: return [2 /*return*/, _d.sent()];
                    case 3:
                        error_2 = _d.sent();
                        if (error_2 instanceof shopify_api_1.InvalidJwtError ||
                            (error_2 instanceof shopify_api_1.HttpResponseError &&
                                error_2.response.code === 400 &&
                                ((_b = error_2.response.body) === null || _b === void 0 ? void 0 : _b.error) === 'invalid_subject_token')) {
                            throw (0, helpers_1.respondToInvalidSessionToken)({
                                params: { api: api, config: config, logger: logger },
                                request: request,
                                retryRequest: true,
                            });
                        }
                        throw new Response(undefined, {
                            status: 500,
                            statusText: 'Internal Server Error',
                        });
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    TokenExchangeStrategy.prototype.handleAfterAuthHook = function (params, session, request, sessionToken) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var config;
            var _this = this;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        config = params.config;
                        return [4 /*yield*/, config.idempotentPromiseHandler.handlePromise({
                                promiseFunction: function () {
                                    return (0, helpers_2.triggerAfterAuthHook)(params, session, request, _this);
                                },
                                identifier: sessionToken,
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return TokenExchangeStrategy;
}());
exports.TokenExchangeStrategy = TokenExchangeStrategy;
//# sourceMappingURL=token-exchange.js.map